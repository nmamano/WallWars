{"version":3,"sources":["gameLogic/mainLogic.js","game/Board.js","shared/Header.js","game/StatusHeader.js","game/TimerHeader.js","game/GameHelp.js","game/MoveHistory.js","game/ControlPanelButton.js","game/ControlPanel.js","game/GamePage.js","lobby/LobbyForm.js","lobby/LobbyHelp.js","lobby/LobbyPage.js","App.js","index.js","static/moveSound.mp3"],"names":["cellTypeByPos","pos","r","c","posEq","pos1","pos2","inBounds","dims","h","w","isWallBuilt","grid","accessibleNeighbors","length","dimensions","dirs","res","pr","pc","k","dr","dc","adjWall","adjGround","push","distance","start","target","C","posToKey","queue","dist","Map","set","shift","nbrs","nbr","has","get","canReach","canBuildWall","playerPos","goals","isValidBoard","displayParams","Board","ghostAction","playerColors","color1","color2","p1","p2","g1","g2","handleClick","creatorToMove","groundSize","wallWidth","isDarkModeOn","allPos","icon1","icon2","repRows","repCols","useState","hoveredCell","setHoveredCell","handleMouseLeave","iconSize","style","display","gridTemplateColumns","gridTemplateRows","justifyContent","gridArea","map","color","p1Here","p2Here","goal1Here","goal2Here","ghostHere","p1GhostHere","p2GhostHere","cellType","invert","className","anyIconHere","solidWallHere","key","onClick","onMouseEnter","handleMouseEnter","onMouseLeave","backgroundColor","alignItems","cursor","borderTop","borderBottom","borderLeft","borderRight","fontSize","Header","brand","gameName","showLobby","endGame","helpText","isLargeScreen","text","onCopy","toast","autoClose","hideProgressBar","transition","Slide","pauseOnFocusLoss","aboutText","undefined","alignLinks","centerLogo","menuIcon","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","actions","marginRight","flat","modal","node","waves","bottomSheet","fixedFooter","header","open","dismissible","endingTop","opacity","startingTop","trigger","StatusHeader","msg","names","lifeCycleStage","winner","finishReason","indexToMove","timeControl","creatorStarts","nameToMove","time","goal","resign","console","error","roundNum","num","Math","round","Number","EPSILON","padding","duration","increment","TimerHeader","timeLeft","floor","min1","min2","sec1","sec2","timesAsStrings","highlightNameToMove","highlightLowTime","pStyle","alignContent","columnGap","GameHelp","MoveHistory","moveHistory","handleViewMove","viewIndex","height","thStyle","position","top","paddingTop","paddingBottom","borderRadius","tdStyle","id","overflowY","centered","width","move","i","index","wallCount","moveToString","distances","wallCounts","GameControlPanelButton","icon","tooltip","confirmQuestion","confirmOption","disabled","GameControlPanel","handleResign","handleOfferDraw","handleProposeTakeback","handleIncreaseOpponentTime","handleSeeFirstMove","handleSeePreviousMove","handleSeeNextMove","handleSeeLastMove","handleToggleVolume","isVolumeOn","handleToggleDarkMode","handleIncreaseBoardSize","handleDecreaseBoardSize","zoomLevel","moveHistoryHeight","boardHeight","buttonHeight","gapHeight","rowGap","ControlPanelButton","gridColumnStart","gridColumnEnd","moveSound","UIfx","moveSoundAudio","corners","tl","tr","bl","br","initialPlayerPos","turnCount","state","emptyGrid","ghostType","makeMove","draftState","moveIndex","timeLeftAfterMove","tc","play","idxToMove","otherIdx","aPos","aType","pToMoveStarted","remainingDist","cloneDeep","GamePage","socket","creatorParams","joinerParams","returnToLobby","clientIsCreator","useImmer","gameId","creatorName","joinerName","showBackButtonWarning","isKeyPressed","updateState","onBackButtonEvent","e","preventDefault","useEffect","window","history","pushState","location","pathname","addEventListener","removeEventListener","backgroundColors","emit","once","log","on","resignerIsCreator","receivedTime","removeAllListeners","interval","setInterval","idx","clearInterval","handleSelectedPosition","clickType","actCount","clickPos","gridCopy","playerPosCopy","gType","clickActionCount","fullMoveActions","newGhostAction","tLeft","downHandler","upHandler","p","handleEndSession","moveHistoryDiv","document","getElementById","scrollTop","scrollHeight","useMediaQuery","query","gSize","wWidth","gridTemplateAreas","scalingFactor","pow","scaledGroundSize","scaledWallWidth","boardWidth","margin","clickedPos","ControlPanel","body","marginTop","s","large","LobbyForm","playerName","handlePlayerName","handleDuration","handleIncrement","joinGameId","handleJoinGameId","handleCreateGame","handleJoinGame","handleRefreshName","value","onChange","small","floating","paddingRight","label","paddingLeft","placeholder","LobbyHelp","randPlayerName","uniqueNamesGenerator","dictionaries","slice","LobbyPage","setPlayerName","setDuration","setIncrement","setJoinGameId","isOngoingGame","setIsOngoingGame","setCreatorParams","setJoinerParams","marginBottom","props","parseFloat","dur","inc","isNaN","App","process","socketIoClient","StrictMode","path","exact","to","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.ef9811dd.chunk.js","sourcesContent":["/* In-game coordinate system:\r\nWalls and junctions between four cells (called pillars) also count for the coordinate\r\nsystem, so the number of rows/columns with \"walkable\" cells (called ground cells) is\r\nactually half of the board's size (rounding up). Both dimensions of the board should\r\nbe odd, as they start and end with a row / column of walkable cells.\r\nThe first coordinate is the row (y-axis / height), denoted with variable r by convention.\r\nThe second coordinate is the column (x-axis / width), denoted with variable c by convention.\r\n*/\r\n\r\nexport function cellTypeByPos(pos) {\r\n  if (pos.r % 2 === 0 && pos.c % 2 === 0) return \"Ground\";\r\n  if (pos.r % 2 === 0 && pos.c % 2 === 1) return \"Wall\";\r\n  if (pos.r % 2 === 1 && pos.c % 2 === 0) return \"Wall\";\r\n  return \"Pillar\"; //case i%2 === 1 && j%2 === 1\r\n}\r\n\r\nexport function posEq(pos1, pos2) {\r\n  return pos1.r === pos2.r && pos1.c === pos2.c;\r\n}\r\n\r\nfunction dimensions(grid) {\r\n  return { h: grid.length, w: grid[0].length };\r\n}\r\n\r\nfunction inBounds(pos, dims) {\r\n  return pos.r >= 0 && pos.r < dims.h && pos.c >= 0 && pos.c < dims.w;\r\n}\r\n\r\nfunction isWallBuilt(grid, pos) {\r\n  const cellType = cellTypeByPos(pos);\r\n  if (cellType !== \"Wall\") return false; //cannot check for wall here\r\n  return grid[pos.r][pos.c] !== 0;\r\n}\r\n\r\nfunction accessibleNeighbors(grid, pos) {\r\n  const dims = dimensions(grid);\r\n  if (cellTypeByPos(pos) !== \"Ground\") {\r\n    return []; //only ground coords can access neighbors\r\n  }\r\n  const dirs = [\r\n    { r: 0, c: 1 },\r\n    { r: 0, c: -1 },\r\n    { r: 1, c: 0 },\r\n    { r: -1, c: 0 },\r\n  ];\r\n  const res = [];\r\n  const [pr, pc] = [pos.r, pos.c];\r\n  for (let k = 0; k < dirs.length; k++) {\r\n    const [dr, dc] = [dirs[k].r, dirs[k].c];\r\n    const adjWall = { r: pr + dr, c: pc + dc };\r\n    const adjGround = { r: pr + 2 * dr, c: pc + 2 * dc };\r\n    if (inBounds(adjGround, dims) && !isWallBuilt(grid, adjWall)) {\r\n      res.push(adjGround);\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nexport function distance(grid, start, target) {\r\n  //implements bfs algorithm\r\n  if (posEq(start, target)) return 0;\r\n  const C = grid[0].length;\r\n  const posToKey = (pos) => pos.r * C + pos.c;\r\n\r\n  const queue = [];\r\n  queue.push(start);\r\n  const dist = new Map();\r\n  dist.set(posToKey(start), 0);\r\n  while (queue.length > 0) {\r\n    const pos = queue.shift(); //todo: inefficient, change for real queue\r\n    const nbrs = accessibleNeighbors(grid, pos);\r\n    for (let k = 0; k < nbrs.length; k++) {\r\n      let nbr = nbrs[k];\r\n      if (!dist.has(posToKey(nbr))) {\r\n        dist.set(posToKey(nbr), dist.get(posToKey(pos)) + 1);\r\n        if (posEq(nbr, target)) return dist.get(posToKey(nbr));\r\n        queue.push(nbr);\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction canReach(grid, start, target) {\r\n  return distance(grid, start, target) !== -1;\r\n}\r\n\r\n//can handle more than 2 players, which is not used for now\r\nfunction isValidBoard(grid, playerPos, goals) {\r\n  for (let k = 0; k < playerPos.length; k++) {\r\n    if (!canReach(grid, playerPos[k], goals[k])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function canBuildWall(grid, playerPos, goals, pos) {\r\n  if (isWallBuilt(grid, pos)) return false;\r\n  grid[pos.r][pos.c] = 1; //grid parameter is only modified in this scope\r\n  var res = isValidBoard(grid, playerPos, goals);\r\n  grid[pos.r][pos.c] = 0;\r\n  return res;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport invert from \"invert-color\";\r\n\r\nimport { cellTypeByPos, posEq } from \"../gameLogic/mainLogic\";\r\n\r\n//cosmetic parameters of the board\r\nconst displayParams = {\r\n  groundColor: \"#d2d2d2\",\r\n  groundHoverColor: \"#fbe4D6\",\r\n  emptyWallColor: \"#eaeaea\",\r\n  emptyWallHoverColor: \"#f1bfa0\",\r\n  pillarColor: \"#cccccc\",\r\n  playerIcons: [\"face\", \"outlet\"],\r\n  borderStyle: \"1px solid #00796d\",\r\n};\r\n\r\n//stateless component to display the board. all the state is at GamePage\r\nconst Board = ({\r\n  grid,\r\n  ghostAction,\r\n  playerColors: [color1, color2],\r\n  playerPos: [p1, p2],\r\n  goals: [g1, g2],\r\n  handleClick,\r\n  creatorToMove,\r\n  groundSize,\r\n  wallWidth,\r\n  isDarkModeOn,\r\n}) => {\r\n  const dims = { h: grid.length, w: grid[0].length };\r\n  const allPos = [];\r\n  for (let r = 0; r < dims.h; r++)\r\n    for (let c = 0; c < dims.w; c++) allPos[r * dims.w + c] = { r: r, c: c };\r\n\r\n  const [icon1, icon2] = displayParams.playerIcons;\r\n  const [repRows, repCols] = [(dims.h - 1) / 2, (dims.w - 1) / 2];\r\n\r\n  const [hoveredCell, setHoveredCell] = useState(null);\r\n\r\n  const handleMouseEnter = (pos) => {\r\n    setHoveredCell(pos);\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setHoveredCell(null);\r\n  };\r\n  const iconSize = 0.8 * groundSize;\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${repCols}, ${groundSize}px ${wallWidth}px) ${groundSize}px`,\r\n        gridTemplateRows: `repeat(${repRows}, ${groundSize}px ${wallWidth}px) ${groundSize}px`,\r\n        justifyContent: \"center\",\r\n        gridArea: \"board\",\r\n      }}\r\n    >\r\n      {allPos.map((pos) => {\r\n        const [p1Here, p2Here] = [posEq(pos, p1), posEq(pos, p2)];\r\n        const [goal1Here, goal2Here] = [posEq(pos, g1), posEq(pos, g2)];\r\n        //ghosts are the partial moves that are only displayed locally\r\n        const ghostHere = ghostAction !== null && posEq(ghostAction, pos);\r\n        const [p1GhostHere, p2GhostHere] = [\r\n          ghostHere && creatorToMove,\r\n          ghostHere && !creatorToMove,\r\n        ];\r\n        const cellType = cellTypeByPos(pos);\r\n\r\n        let color;\r\n        if (cellType === \"Ground\") {\r\n          if (hoveredCell && posEq(pos, hoveredCell))\r\n            color = displayParams.groundHoverColor;\r\n          else color = displayParams.groundColor;\r\n        } else if (cellType === \"Wall\") {\r\n          if (hoveredCell && posEq(pos, hoveredCell))\r\n            color = displayParams.emptyWallHoverColor;\r\n          else color = displayParams.emptyWallColor;\r\n        } else color = displayParams.pillarColor;\r\n        if (isDarkModeOn) color = invert(color);\r\n\r\n        let className = \"\";\r\n        //add waves cosmetic effect when clicking a cell\r\n        if (cellType === \"Ground\") className += \" waves-effect waves-light\";\r\n        if (cellType === \"Wall\") className += \" waves-effect waves-dark\";\r\n\r\n        const anyIconHere = p1Here || p2Here || p1GhostHere || p2GhostHere;\r\n\r\n        //special coloring for Ground cells containing the goals goals\r\n        if (goal1Here || goal2Here) {\r\n          className = goal1Here ? color1 : color2;\r\n          className += isDarkModeOn ? \" darken-4\" : \" lighten-4\";\r\n        }\r\n        //wall coloring for built walls (depending on builder)\r\n        if (cellType === \"Wall\") {\r\n          const solidWallHere = grid[pos.r][pos.c] !== 0;\r\n          if (solidWallHere || ghostHere) {\r\n            if (solidWallHere) {\r\n              className = grid[pos.r][pos.c] === 1 ? color1 : color2;\r\n              className += isDarkModeOn ? \"\" : \" darken-3\";\r\n            } else {\r\n              className = creatorToMove ? color1 : color2;\r\n              className += isDarkModeOn ? \" lighten-2\" : \" lighten-3\";\r\n            }\r\n          }\r\n        }\r\n\r\n        return (\r\n          <div\r\n            className={className}\r\n            key={`cell_${pos.r}_${pos.c}`}\r\n            onClick={() => {\r\n              if (cellType !== \"Pillar\") handleClick(pos);\r\n            }}\r\n            onMouseEnter={() => handleMouseEnter(pos)}\r\n            onMouseLeave={handleMouseLeave}\r\n            style={{\r\n              backgroundColor: color,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              cursor: \"pointer\",\r\n              borderTop: pos.r === 0 ? displayParams.borderStyle : \"\",\r\n              borderBottom:\r\n                pos.r === dims.h - 1 ? displayParams.borderStyle : \"\",\r\n              borderLeft: pos.c === 0 ? displayParams.borderStyle : \"\",\r\n              borderRight:\r\n                pos.c === dims.w - 1 ? displayParams.borderStyle : \"\",\r\n            }}\r\n          >\r\n            {p1Here && (\r\n              <i\r\n                className={`material-icons ${color1}-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {p2Here && (\r\n              <i\r\n                className={`material-icons ${color2}-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n            {goal1Here && !anyIconHere && (\r\n              <i\r\n                className={`material-icons white-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {goal2Here && !anyIconHere && (\r\n              <i\r\n                className={`material-icons white-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n            {p1GhostHere && cellType === \"Ground\" && (\r\n              <i\r\n                className={`material-icons ${color1}-text text-lighten-4`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {p2GhostHere && cellType === \"Ground\" && (\r\n              <i\r\n                className={`material-icons ${color2}-text text-lighten-4`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"materialize-css\";\r\nimport { Navbar, Icon, NavItem, Modal, Button } from \"react-materialize\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { ToastContainer, toast, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction Header({\r\n  gameName,\r\n  showLobby,\r\n  endGame,\r\n  helpText,\r\n  isLargeScreen,\r\n  isDarkModeOn,\r\n}) {\r\n  let brand;\r\n  if (!gameName) {\r\n    brand = <span>WallWars</span>;\r\n  } else {\r\n    brand = (\r\n      <span>\r\n        {isLargeScreen && <span>WallWars&nbsp;&nbsp;</span>}\r\n        <CopyToClipboard\r\n          style={{ cursor: \"pointer\" }}\r\n          text={gameName}\r\n          onCopy={() =>\r\n            toast(\"Game code copied to clipboard!\", {\r\n              autoClose: 2500,\r\n              hideProgressBar: true,\r\n              transition: Slide,\r\n              pauseOnFocusLoss: false,\r\n            })\r\n          }\r\n        >\r\n          <span>Game {gameName}</span>\r\n        </CopyToClipboard>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const aboutText = (\r\n    <div>\r\n      <h6>\r\n        Wallwars is an online 2-player strategy game. The goal is to get to your\r\n        goal before the opponent gets to hers, building walls to reshape the\r\n        terrain to your advantage.\r\n      </h6>\r\n      <h6>\r\n        It is implemented by Nil M and inspired by a board game he played once\r\n        as a kid, of which he doesn't remember the name, unfortunately.\r\n      </h6>\r\n      <h6>\r\n        The frontend is made with React, and the backend with Node.js, Express,\r\n        and socket.io.\r\n      </h6>\r\n      <h6>\r\n        The source code is available at https://github.com/nmamano/WallWars\r\n      </h6>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <Navbar\r\n        className={isDarkModeOn ? \"red darken-4\" : undefined}\r\n        alignLinks=\"right\"\r\n        brand={brand}\r\n        centerLogo\r\n        menuIcon={<Icon>menu</Icon>}\r\n        options={{\r\n          draggable: true,\r\n          edge: \"left\",\r\n          inDuration: 250,\r\n          onCloseEnd: null,\r\n          onCloseStart: null,\r\n          onOpenEnd: null,\r\n          onOpenStart: null,\r\n          outDuration: 200,\r\n          preventScrolling: true,\r\n        }}\r\n      >\r\n        {showLobby && (\r\n          <Modal\r\n            style={{ color: \"black\" }}\r\n            actions={[\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"#009688\",\r\n                  color: \"white\",\r\n                  marginRight: \"1rem\",\r\n                }}\r\n                flat\r\n                modal=\"close\"\r\n                node=\"button\"\r\n                waves=\"green\"\r\n                onClick={endGame}\r\n              >\r\n                Quit game\r\n              </Button>,\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"#009688\",\r\n                  color: \"white\",\r\n                }}\r\n                flat\r\n                modal=\"close\"\r\n                node=\"button\"\r\n                waves=\"green\"\r\n              >\r\n                Close\r\n              </Button>,\r\n            ]}\r\n            bottomSheet={false}\r\n            fixedFooter={false}\r\n            header=\"Resign\"\r\n            open={false}\r\n            options={{\r\n              dismissible: true,\r\n              endingTop: \"10%\",\r\n              inDuration: 250,\r\n              opacity: 0.4,\r\n              outDuration: 250,\r\n              preventScrolling: true,\r\n              startingTop: \"4%\",\r\n            }}\r\n            trigger={<NavItem>Lobby</NavItem>}\r\n          >\r\n            {\r\n              <p>\r\n                Are you sure you want to return to the lobby? You will not be\r\n                able to rejoin this game.\r\n              </p>\r\n            }\r\n          </Modal>\r\n        )}\r\n        <Modal\r\n          style={{ color: \"black\" }}\r\n          actions={[\r\n            <Button\r\n              style={{ backgroundColor: \"#009688\", color: \"white\" }}\r\n              flat\r\n              modal=\"close\"\r\n              node=\"button\"\r\n              waves=\"green\"\r\n            >\r\n              Close\r\n            </Button>,\r\n          ]}\r\n          bottomSheet={false}\r\n          fixedFooter={false}\r\n          header=\"Help\"\r\n          open={false}\r\n          options={{\r\n            dismissible: true,\r\n            endingTop: \"10%\",\r\n            inDuration: 250,\r\n            opacity: 0.4,\r\n            outDuration: 250,\r\n            preventScrolling: true,\r\n            startingTop: \"4%\",\r\n          }}\r\n          trigger={<NavItem>Help</NavItem>}\r\n        >\r\n          {helpText}\r\n        </Modal>\r\n\r\n        <Modal\r\n          style={{ color: \"black\" }}\r\n          actions={[\r\n            <Button\r\n              style={{ backgroundColor: \"#009688\", color: \"white\" }}\r\n              flat\r\n              modal=\"close\"\r\n              node=\"button\"\r\n              waves=\"green\"\r\n            >\r\n              Close\r\n            </Button>,\r\n          ]}\r\n          bottomSheet={false}\r\n          fixedFooter={false}\r\n          header=\"About\"\r\n          open={false}\r\n          options={{\r\n            dismissible: true,\r\n            endingTop: \"10%\",\r\n            inDuration: 250,\r\n            opacity: 0.4,\r\n            outDuration: 250,\r\n            preventScrolling: true,\r\n            startingTop: \"4%\",\r\n          }}\r\n          trigger={<NavItem>About</NavItem>}\r\n        >\r\n          {aboutText}\r\n        </Modal>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst StatusHeader = ({\r\n  names,\r\n  lifeCycleStage,\r\n  winner,\r\n  finishReason,\r\n  indexToMove,\r\n  timeControl,\r\n  creatorStarts,\r\n}) => {\r\n  let msg;\r\n  const nameToMove = names[indexToMove];\r\n  const finishMessage = {\r\n    time: \"on time\",\r\n    goal: \"by reaching the goal\",\r\n    resign: \"by resignation\",\r\n  };\r\n  switch (lifeCycleStage) {\r\n    case -2:\r\n      msg = \"Haven't tried to connect to the server yet\";\r\n      break;\r\n    case -1:\r\n      msg = \"Waking the server up...\";\r\n      break;\r\n    case 0:\r\n      msg = \"Waiting for player 2 to join\";\r\n      break;\r\n    case 1:\r\n      msg = `${nameToMove} starts`;\r\n      break;\r\n    case 2:\r\n    case 3:\r\n      msg = `${nameToMove} to move`;\r\n      break;\r\n    case 4:\r\n      if (winner === \"draw\") msg = \"The game ended in a draw\";\r\n      else\r\n        msg = `${names[winner === \"creator\" ? 0 : 1]} won ${\r\n          finishMessage[finishReason]\r\n        }`;\r\n      break;\r\n    default:\r\n      console.error(\"stage should be in range [-2..4]\");\r\n  }\r\n\r\n  const roundNum = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\r\n\r\n  return (\r\n    <div\r\n      className={\"teal darken-2\"}\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"auto\",\r\n        gridTemplateRows: \"1fr 1fr 1fr\",\r\n        alignItems: \"center\",\r\n        padding: \"15px\",\r\n        gridArea: \"status\",\r\n      }}\r\n    >\r\n      <div>\r\n        <p>{msg}</p>\r\n      </div>\r\n      <div>\r\n        {timeControl && (\r\n          <p>\r\n            Time control: {roundNum(timeControl.duration)}+\r\n            {roundNum(timeControl.increment)}\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <p>\r\n          {\"First move:\" +\r\n            (lifeCycleStage > 1 ? ` ${names[creatorStarts ? 0 : 1]}` : \"\")}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusHeader;\r\n","import React from \"react\";\r\n\r\nconst TimerHeader = ({\r\n  lifeCycleStage,\r\n  names,\r\n  playerColors,\r\n  timeLeft,\r\n  indexToMove,\r\n}) => {\r\n  const [min1, min2] = [\r\n    Math.floor(timeLeft[0] / 60),\r\n    Math.floor(timeLeft[1] / 60),\r\n  ];\r\n  const [sec1, sec2] = [timeLeft[0] % 60, timeLeft[1] % 60];\r\n  const timesAsStrings = [\r\n    `${min1}:${sec1 < 10 ? \"0\" : \"\"}${sec1}`,\r\n    `${min2}:${sec2 < 10 ? \"0\" : \"\"}${sec2}`,\r\n  ];\r\n  if (lifeCycleStage < 0) {\r\n    timesAsStrings[0] = \"_:__\";\r\n    timesAsStrings[1] = \"_:__\";\r\n  }\r\n  const highlightNameToMove = [\"\", \"\"];\r\n  if (lifeCycleStage < 4) {\r\n    //only if the game has not ended yet\r\n    const turnHighlight = \" lighten-1 z-depth-2\";\r\n    highlightNameToMove[indexToMove] =\r\n      playerColors[indexToMove] + turnHighlight;\r\n  }\r\n\r\n  const highlightLowTime = [\"\", \"\"];\r\n  const lowTime = 15;\r\n  const lowTimeColor = \" orange lighten-2 z-depth-2\";\r\n  if (lifeCycleStage === 3) {\r\n    if (indexToMove === 0) {\r\n      if (timeLeft[0] < lowTime) highlightLowTime[0] = lowTimeColor;\r\n    } else if (indexToMove === 1) {\r\n      if (timeLeft[1] < lowTime) highlightLowTime[1] = lowTimeColor;\r\n    }\r\n  }\r\n\r\n  const pStyle = { padding: \"15px\", fontSize: \"18px\" };\r\n\r\n  return (\r\n    <div\r\n      className={\"teal darken-2\"}\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1.7fr 1fr 1fr 1.7fr\",\r\n        gridTemplateRows: \"auto\",\r\n        alignContent: \"center\",\r\n        columnGap: \"15px\",\r\n        padding: \"15px\",\r\n        gridArea: \"timer\",\r\n      }}\r\n    >\r\n      <div\r\n        style={pStyle}\r\n        className={highlightNameToMove[0] + \" center truncate\"}\r\n      >\r\n        {names[0]}\r\n      </div>\r\n      <div style={pStyle} className={highlightLowTime[0] + \" center\"}>\r\n        {timesAsStrings[0]}\r\n      </div>\r\n      <div style={pStyle} className={highlightLowTime[1] + \" center\"}>\r\n        {timesAsStrings[1]}\r\n      </div>\r\n      <div\r\n        style={pStyle}\r\n        className={highlightNameToMove[1] + \" center truncate\"}\r\n      >\r\n        {names[1] === null ? \"______\" : names[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimerHeader;\r\n","import React from \"react\";\r\n\r\nconst GameHelp = () => (\r\n  <div>\r\n    <h6>\r\n      To connect with your friend, share the game code in the top header with\r\n      them and tell them to use it when clicking \"Join Game\" from the lobby.\r\n      Click on the code to copy it to the clipboard.\r\n    </h6>\r\n    <h6>Rules of the game:</h6>\r\n    <h6>\r\n      The player who created the game starts at the top left corner (color red).\r\n      The player who joined the game starts at the top right (color blue). The\r\n      goal of each player is to reach the <em>opposite</em> corner from where\r\n      they start. The player who gets there first, wins.\r\n    </h6>\r\n    <h6>\r\n      Players move by clicking cells on the board. There are two types of cells:\r\n      ground cells (the big squares) and walls (the thin rectangles in between\r\n      ground cells). Each move consists of a total of two actions. One action\r\n      can be building one wall or moving to an adjacent cell (a diagonal move\r\n      counts as two actions).\r\n    </h6>\r\n    <h6>\r\n      Players can build walls to obstruct the opponent. Walls can be built\r\n      anywhere as long as there always exists at least one way to get to their\r\n      goal.\r\n    </h6>\r\n    <h6>\r\n      The remaining time for each player is shown next to their name. The clock\r\n      of a player ticks down when it is their turn (after each player has moved\r\n      once). The player who starts is chosen randomly. The name of the player to\r\n      move next is highlighted with their color.\r\n    </h6>\r\n    <h6>\r\n      If it is your turn and you do a single action, like building a wall or\r\n      moving to an adjacent cell, you can undo it by clicking the wall again or\r\n      clicking a different ground cell, respectively. Once you choose 2 actions,\r\n      the move becomes permanent.\r\n    </h6>\r\n    <h6>Special rules:</h6>\r\n    <h6>(1) no walls can be placed during the first move of each player.</h6>\r\n    <h6>\r\n      (2) if the player who moved first reaches the goal first but the other\r\n      player is at distance 1 or 2 from her goal, the game ends in a draw.\r\n    </h6>\r\n    <h6>\r\n      Note: if you return to the lobby, you will not be able to reenter this\r\n      game!\r\n    </h6>\r\n  </div>\r\n);\r\n\r\nexport default GameHelp;\r\n","import React from \"react\";\r\nimport { Table } from \"react-materialize\";\r\n\r\nimport { cellTypeByPos } from \"../gameLogic/mainLogic\";\r\n\r\nconst moveToString = (move) => {\r\n  if (move.index === 0) return \"__\";\r\n  let wallCount = 0;\r\n  for (let k = 0; k < move.actions.length; k++) {\r\n    const aPos = move.actions[k];\r\n    const aType = cellTypeByPos(aPos);\r\n    if (aType === \"Wall\") wallCount += 1;\r\n  }\r\n  if (wallCount === 0) return \"GG\";\r\n  else if (wallCount === 1) return \"GW\";\r\n  return \"WW\";\r\n};\r\n\r\nconst MoveHistory = ({\r\n  moveHistory,\r\n  playerColors,\r\n  creatorStarts,\r\n  handleViewMove,\r\n  viewIndex,\r\n  height,\r\n}) => {\r\n  const thStyle = {\r\n    position: \"sticky\",\r\n    top: \"0px\",\r\n    paddingTop: \"0.15rem\",\r\n    paddingBottom: \"0.15rem\",\r\n    borderRadius: \"0\",\r\n  };\r\n  const tdStyle = {\r\n    paddingTop: \"0.15rem\",\r\n    paddingBottom: \"0.15rem\",\r\n    borderRadius: \"0\",\r\n  };\r\n  return (\r\n    <div\r\n      id={\"movehistory\"}\r\n      className={\"center\"}\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        display: \"block\",\r\n        height: height,\r\n      }}\r\n    >\r\n      <Table centered style={{ width: \"100%\" }}>\r\n        <thead>\r\n          <tr>\r\n            <th className={\"teal darken-2\"} style={thStyle}>\r\n              Move\r\n            </th>\r\n            <th className={\"teal darken-2\"} style={thStyle}>\r\n              Actions\r\n            </th>\r\n            <th className={\"teal darken-2\"} style={thStyle}>\r\n              Distance\r\n            </th>\r\n            <th className={\"teal darken-2\"} style={thStyle}>\r\n              # Walls\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {moveHistory.map((move, i) => {\r\n            let color;\r\n            if (i === 0) color = undefined;\r\n            else {\r\n              if (creatorStarts) color = playerColors[(i + 1) % 2];\r\n              else color = playerColors[i % 2];\r\n              color += \" lighten-2\";\r\n            }\r\n            if (viewIndex === i && i < moveHistory.length - 1)\r\n              color = \"amber darken-1\";\r\n            return (\r\n              <tr\r\n                onClick={() => handleViewMove(i)}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                }}\r\n                key={i}\r\n                className={color}\r\n              >\r\n                <td style={tdStyle}>{i}</td>\r\n                <td style={tdStyle}>{moveToString(move)}</td>\r\n                <td style={tdStyle}>\r\n                  {move.distances[0] + \" - \" + move.distances[1]}\r\n                </td>\r\n                <td style={tdStyle}>\r\n                  {move.wallCounts[0] + \" - \" + move.wallCounts[1]}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoveHistory;\r\n","import React from \"react\";\r\nimport { Button, Icon, Modal } from \"react-materialize\";\r\n\r\nconst GameControlPanelButton = ({\r\n  icon,\r\n  tooltip,\r\n  onClick,\r\n  confirmQuestion,\r\n  confirmOption,\r\n  disabled,\r\n}) => {\r\n  if (!confirmQuestion) {\r\n    return (\r\n      <Button\r\n        className=\"teal\"\r\n        node=\"button\"\r\n        waves=\"light\"\r\n        icon={<Icon className=\"large\">{icon}</Icon>}\r\n        onClick={onClick}\r\n        tooltip={tooltip}\r\n        disabled={disabled}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Modal\r\n      style={{ color: \"black\" }}\r\n      actions={[\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"#009688\",\r\n            color: \"white\",\r\n            marginRight: \"1rem\",\r\n          }}\r\n          flat\r\n          modal=\"close\"\r\n          node=\"button\"\r\n          waves=\"green\"\r\n          onClick={onClick}\r\n        >\r\n          {confirmOption}\r\n        </Button>,\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"#009688\",\r\n            color: \"white\",\r\n          }}\r\n          flat\r\n          modal=\"close\"\r\n          node=\"button\"\r\n          waves=\"green\"\r\n        >\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n      bottomSheet={false}\r\n      fixedFooter={false}\r\n      header=\"Resign\"\r\n      open={false}\r\n      options={{\r\n        dismissible: true,\r\n        endingTop: \"10%\",\r\n        inDuration: 250,\r\n        opacity: 0.4,\r\n        outDuration: 250,\r\n        preventScrolling: true,\r\n        startingTop: \"4%\",\r\n      }}\r\n      trigger={\r\n        <Button\r\n          className=\"teal\"\r\n          node=\"button\"\r\n          waves=\"light\"\r\n          icon={<Icon className=\"large\">{icon}</Icon>}\r\n          tooltip={tooltip}\r\n          disabled={disabled}\r\n        />\r\n      }\r\n    >\r\n      {<p>{confirmQuestion}</p>}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default GameControlPanelButton;\r\n","import React from \"react\";\r\nimport MoveHistory from \"./MoveHistory\";\r\nimport ControlPanelButton from \"./ControlPanelButton\";\r\n\r\nconst GameControlPanel = ({\r\n  lifeCycleStage,\r\n  handleResign,\r\n  handleOfferDraw,\r\n  handleProposeTakeback,\r\n  handleIncreaseOpponentTime,\r\n  moveHistory,\r\n  playerColors,\r\n  creatorStarts,\r\n  handleViewMove,\r\n  viewIndex,\r\n  handleSeeFirstMove,\r\n  handleSeePreviousMove,\r\n  handleSeeNextMove,\r\n  handleSeeLastMove,\r\n  handleToggleVolume,\r\n  isVolumeOn,\r\n  handleToggleDarkMode,\r\n  isDarkModeOn,\r\n  handleIncreaseBoardSize,\r\n  handleDecreaseBoardSize,\r\n  zoomLevel,\r\n  boardHeight,\r\n}) => {\r\n  const padding = 5;\r\n  const gapHeight = 5;\r\n  const buttonHeight = 36;\r\n  const disableUnimplemented = true;\r\n  const moveHistoryHeight =\r\n    boardHeight - buttonHeight * 3 - gapHeight * 3 - padding * 2;\r\n  return (\r\n    <div\r\n      className=\"teal darken-2\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n        display: \"grid\",\r\n        padding: `${padding}px`,\r\n        gridTemplateColumns: \"repeat(4, 1fr)\",\r\n        gridTemplateRows: `${buttonHeight}px 1fr ${buttonHeight}px ${buttonHeight}px`,\r\n        columnGap: `${gapHeight}px`,\r\n        rowGap: `${gapHeight}px`,\r\n        gridArea: \"panel\",\r\n      }}\r\n    >\r\n      <ControlPanelButton\r\n        icon={\"flag\"}\r\n        tooltip={\"Resign\"}\r\n        onClick={handleResign}\r\n        confirmQuestion={\"Are you sure you want to resign?\"}\r\n        confirmOption={\"Resign\"}\r\n        disabled={lifeCycleStage !== 3}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"local_florist\"}\r\n        tooltip={\"Offer Draw\"}\r\n        onClick={handleOfferDraw}\r\n        confirmQuestion={\"Are you sure you want to offer a draw?\"}\r\n        confirmOption={\"Offer draw\"}\r\n        disabled={disableUnimplemented || lifeCycleStage !== 3}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"replay\"}\r\n        tooltip={\"Propose takeback\"}\r\n        onClick={handleProposeTakeback}\r\n        disabled={disableUnimplemented || lifeCycleStage !== 3}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"add_alarm\"}\r\n        tooltip={\"Give 60 seconds\"}\r\n        onClick={handleIncreaseOpponentTime}\r\n        disabled={disableUnimplemented || lifeCycleStage !== 3}\r\n      />\r\n      <div style={{ gridColumnStart: \"1\", gridColumnEnd: \"5\" }}>\r\n        <MoveHistory\r\n          moveHistory={moveHistory}\r\n          playerColors={playerColors}\r\n          creatorStarts={creatorStarts}\r\n          handleViewMove={handleViewMove}\r\n          viewIndex={viewIndex}\r\n          height={moveHistoryHeight}\r\n        />\r\n      </div>\r\n      <ControlPanelButton\r\n        icon={\"fast_rewind\"}\r\n        onClick={handleSeeFirstMove}\r\n        disabled={lifeCycleStage <= 1}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"navigate_before\"}\r\n        onClick={handleSeePreviousMove}\r\n        disabled={lifeCycleStage <= 1}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"navigate_next\"}\r\n        onClick={handleSeeNextMove}\r\n        disabled={lifeCycleStage <= 1}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"fast_forward\"}\r\n        onClick={handleSeeLastMove}\r\n        disabled={lifeCycleStage <= 1}\r\n      />\r\n      <ControlPanelButton\r\n        icon={isVolumeOn ? \"volume_up\" : \"volume_off\"}\r\n        tooltip={\r\n          isVolumeOn ? \"Turn off sound effects\" : \"Turn on sound effects\"\r\n        }\r\n        onClick={handleToggleVolume}\r\n      />\r\n      <ControlPanelButton\r\n        icon={isDarkModeOn ? \"brightness_2\" : \"brightness_4\"}\r\n        tooltip={isDarkModeOn ? \"Turn off dark mode\" : \"Turn on dark mode\"}\r\n        onClick={handleToggleDarkMode}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"zoom_out\"}\r\n        tooltip={\"Decrease board size\"}\r\n        onClick={handleDecreaseBoardSize}\r\n        disabled={zoomLevel === 0}\r\n      />\r\n      <ControlPanelButton\r\n        icon={\"zoom_in\"}\r\n        tooltip={\"Increase board size\"}\r\n        onClick={handleIncreaseBoardSize}\r\n        disabled={zoomLevel === 10}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameControlPanel;\r\n","import React, { useEffect } from \"react\";\r\nimport { Button, Row, Col, Modal } from \"react-materialize\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\nimport { useImmer } from \"use-immer\";\r\nimport UIfx from \"uifx\";\r\nimport moveSoundAudio from \"./../static/moveSound.mp3\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nimport {\r\n  cellTypeByPos,\r\n  posEq,\r\n  distance,\r\n  canBuildWall,\r\n} from \"../gameLogic/mainLogic\";\r\nimport Board from \"./Board\";\r\nimport Header from \"../shared/Header\";\r\nimport StatusHeader from \"./StatusHeader\";\r\nimport TimerHeader from \"./TimerHeader\";\r\nimport GameHelp from \"./GameHelp\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n//===================================================\r\n//settings that never change, so they don't need to be inside the component\r\n//===================================================\r\nconst moveSound = new UIfx(moveSoundAudio);\r\n\r\nconst dims = { w: 23, h: 19 }; //traditional board size\r\nconst corners = {\r\n  tl: { r: 0, c: 0 },\r\n  tr: { r: 0, c: dims.w - 1 },\r\n  bl: { r: dims.h - 1, c: 0 },\r\n  br: { r: dims.h - 1, c: dims.w - 1 },\r\n};\r\n//most data structures related to the players use an array\r\n//of length 2, with the data for the creator first\r\nconst [creatorIndex, joinerIndex] = [0, 1];\r\nconst initialPlayerPos = [corners.tl, corners.tr];\r\nconst goals = [corners.br, corners.bl];\r\nconst playerColors = [\"red\", \"indigo\"];\r\nconst groundSize = 37; //in pixels\r\nconst wallWidth = 12; //in pixels\r\n\r\n//===================================================\r\n//utility functions that don't require any state\r\n//===================================================\r\nconst turnCount = (state) => state.moveHistory.length - 1;\r\n\r\nconst creatorToMove = (state) =>\r\n  turnCount(state) % 2 === (state.creatorStarts ? 0 : 1);\r\n\r\nconst indexToMove = (state) =>\r\n  creatorToMove(state) ? creatorIndex : joinerIndex;\r\n\r\nconst emptyGrid = (dims) => {\r\n  let grid = [];\r\n  for (let r = 0; r < dims.h; r++) {\r\n    grid[r] = [];\r\n    for (let c = 0; c < dims.w; c++) grid[r][c] = 0;\r\n  }\r\n  return grid;\r\n};\r\n\r\n//one of 'None', 'Ground', 'Wall'\r\nconst ghostType = (pos) => (pos === null ? \"None\" : cellTypeByPos(pos));\r\n\r\n//function that updates the state of the game when a move happens\r\n//(it's a bit out of context out here, but it doesn't need to be inside the component)\r\n//it applied the move number 'moveIndex', consisting of the action(s) in 'actions',\r\n//to the state 'draftState'\r\n//'draftState' is a copy of the actual state in the GamePage component, so it can be mutated\r\n//(see the definition of 'state' in GamePage)\r\n//'timeLeftAfterMove' is the time left by the player who made the move\r\nconst makeMove = (\r\n  draftState,\r\n  actions,\r\n  moveIndex,\r\n  timeLeftAfterMove,\r\n  isVolumeOn\r\n) => {\r\n  //only in life cycle stages 1,2,3 players can make move\r\n  if (draftState.lifeCycleStage < 1 || draftState.lifeCycleStage > 3) return;\r\n  //make the move only if it is the next one (safety measure against desync issues)\r\n  const tc = turnCount(draftState);\r\n  if (tc !== moveIndex - 1) return;\r\n\r\n  if (isVolumeOn) moveSound.play();\r\n\r\n  const idxToMove = indexToMove(draftState);\r\n  const otherIdx = idxToMove === creatorIndex ? joinerIndex : creatorIndex;\r\n  let wallCount = 0;\r\n  for (let k = 0; k < actions.length; k++) {\r\n    const aPos = actions[k];\r\n    const aType = cellTypeByPos(aPos);\r\n    if (aType === \"Ground\") {\r\n      draftState.playerPos[idxToMove] = aPos;\r\n      if (posEq(aPos, goals[idxToMove])) {\r\n        const pToMoveStarted = tc % 2 === 0;\r\n        const remainingDist = distance(\r\n          draftState.grid,\r\n          draftState.playerPos[otherIdx],\r\n          goals[otherIdx]\r\n        );\r\n        if (pToMoveStarted && remainingDist <= 2) {\r\n          draftState.winner = \"draw\";\r\n          draftState.finishReason = \"goal\";\r\n          draftState.lifeCycleStage = 4;\r\n        } else {\r\n          draftState.winner = idxToMove === 0 ? \"creator\" : \"joiner\";\r\n          draftState.finishReason = \"goal\";\r\n          draftState.lifeCycleStage = 4;\r\n        }\r\n      }\r\n    } else if (aType === \"Wall\") {\r\n      draftState.grid[aPos.r][aPos.c] = idxToMove + 1;\r\n      wallCount += 1;\r\n    } else console.error(\"unexpected action type\", aType);\r\n  }\r\n  if (timeLeftAfterMove) draftState.timeLeft[idxToMove] = timeLeftAfterMove;\r\n  draftState.ghostAction = null; //ghost actions are cleared when a move actually happens\r\n  const wallCounts = cloneDeep(draftState.moveHistory[tc].wallCounts);\r\n  wallCounts[idxToMove] += wallCount;\r\n  draftState.moveHistory.push({\r\n    index: tc + 1,\r\n    actions: actions,\r\n    grid: draftState.grid,\r\n    playerPos: draftState.playerPos,\r\n    timeLeft: draftState.timeLeft,\r\n    distances: [\r\n      distance(draftState.grid, draftState.playerPos[0], goals[0]),\r\n      distance(draftState.grid, draftState.playerPos[1], goals[1]),\r\n    ],\r\n    wallCounts: wallCounts,\r\n  });\r\n  if (draftState.lifeCycleStage === 1 && tc === 0)\r\n    draftState.lifeCycleStage = 2;\r\n  else if (draftState.lifeCycleStage === 2 && tc === 1)\r\n    draftState.lifeCycleStage = 3;\r\n\r\n  //if the player is looking at a previous move, when a move happens\r\n  //they are automatically switched to viewing the new move\r\n  draftState.viewIndex = tc + 1;\r\n};\r\n\r\nconst GamePage = ({\r\n  socket,\r\n  creatorParams, //timeControl and creatorName\r\n  joinerParams, //gameId and joinerName\r\n  returnToLobby, //call this to return to lobby\r\n}) => {\r\n  //===================================================\r\n  //state that depends on the props, but is otherwise constant\r\n  //===================================================\r\n  const clientIsCreator = creatorParams !== null;\r\n\r\n  //===================================================\r\n  //'state' contains every other piece of state\r\n  //===================================================\r\n  const [state, updateState] = useImmer({\r\n    //===================================================\r\n    //state initialized from the props OR the server, depending on creator/joiner\r\n    //===================================================\r\n    //game code used by the joiner to join the game\r\n    gameId: clientIsCreator ? null : joinerParams.gameId,\r\n    //duration in minutes and increment in seconds\r\n    timeControl: clientIsCreator ? creatorParams.timeControl : null,\r\n    names: [\r\n      clientIsCreator ? creatorParams.creatorName : null,\r\n      clientIsCreator ? null : joinerParams.joinerName,\r\n    ],\r\n    creatorStarts: null, //who starts is decided by the server\r\n\r\n    //===================================================\r\n    //state that changes during the game and is common to both clients and synched\r\n    //===================================================\r\n    playerPos: initialPlayerPos,\r\n    //grid contains the locations of all the built walls, labeled by who built them\r\n    //0: empty wall, 1: player built by creator, 2: player built by joiner\r\n    grid: emptyGrid(dims),\r\n    timeLeft: [\r\n      clientIsCreator ? creatorParams.timeControl.duration * 60 : null,\r\n      clientIsCreator ? creatorParams.timeControl.duration * 60 : null,\r\n    ],\r\n    winner: \"\", //'' if game is ongoing, else 'creator', 'joiner', or 'draw'\r\n    finishReason: \"\", //'' if game is ongoing, else 'time', 'goal', or 'resign'\r\n\r\n    moveHistory: [\r\n      {\r\n        index: 0,\r\n        actions: [],\r\n        grid: emptyGrid(dims),\r\n        playerPos: initialPlayerPos,\r\n        timeLeft: [\r\n          clientIsCreator ? creatorParams.timeControl.duration * 60 : null,\r\n          clientIsCreator ? creatorParams.timeControl.duration * 60 : null,\r\n        ],\r\n        distances: [\r\n          distance(emptyGrid(dims), initialPlayerPos[0], goals[0]),\r\n          distance(emptyGrid(dims), initialPlayerPos[1], goals[1]),\r\n        ],\r\n        wallCounts: [0, 0],\r\n      },\r\n    ],\r\n\r\n    //life cycle of the game\r\n    //-2. Before sending 'createGame'/'joinGame' (for creator/joiner) to the server\r\n    //-1. Before receiving 'gameCreated'/'gameJoined' (for creator/joiner) from the server\r\n    //0. game created on server, but joiner not joined yet (only creator goes into this stage).\r\n    //1. joiner joined, but no moves made yet. Clocks not ticking.\r\n    //2. One player moved. Clocks still not ticking.\r\n    //3. Both players made at least 1 move and game has not ended. Clocks are ticking.\r\n    //4. Game ended because a win/draw condition is reached.\r\n    lifeCycleStage: -2,\r\n\r\n    //===================================================\r\n    //state that changes during the game AND is unique to this client\r\n    //===================================================\r\n    //the ghost action is a single action that is shown only to this client\r\n    //it can be combined with another action to make a full move, or undone in order to\r\n    //choose a different action\r\n    ghostAction: null,\r\n\r\n    isVolumeOn: false,\r\n    isDarkModeOn: false,\r\n    showBackButtonWarning: false,\r\n    isKeyPressed: false,\r\n    //index of the move that the client is looking at, which may not be the last one\r\n    viewIndex: 0,\r\n    zoomLevel: 5, //number from 0 to 10\r\n  });\r\n\r\n  //handle browser back arrow\r\n  const onBackButtonEvent = (e) => {\r\n    e.preventDefault();\r\n    updateState((draftState) => {\r\n      draftState.showBackButtonWarning = true;\r\n    });\r\n  };\r\n  const handleConfirmBackButton = () => {\r\n    updateState((draftState) => {\r\n      draftState.showBackButtonWarning = false;\r\n    });\r\n    handleEndSession();\r\n  };\r\n  const handleCancelBackButton = () => {\r\n    updateState((draftState) => {\r\n      draftState.showBackButtonWarning = false;\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    window.history.pushState(null, null, window.location.pathname);\r\n    window.addEventListener(\"popstate\", onBackButtonEvent);\r\n    return () => window.removeEventListener(\"popstate\", onBackButtonEvent);\r\n  });\r\n\r\n  const handleToggleVolume = () => {\r\n    updateState((draftState) => {\r\n      draftState.isVolumeOn = !draftState.isVolumeOn;\r\n    });\r\n  };\r\n  const backgroundColors = {\r\n    dark: \"#004d40\",\r\n    light: \"#009688\",\r\n  };\r\n  const handleToggleDarkMode = () => {\r\n    updateState((draftState) => {\r\n      draftState.isDarkModeOn = !draftState.isDarkModeOn;\r\n      //temporary hack -- not a proper way to change the bg color\r\n      if (draftState.isDarkModeOn)\r\n        document.body.style.backgroundColor = backgroundColors.dark;\r\n      else document.body.style.backgroundColor = backgroundColors.light;\r\n    });\r\n  };\r\n\r\n  //first contact to server\r\n  useEffect(() => {\r\n    //first contact only from lifecycle stage -2\r\n    if (state.lifeCycleStage !== -2) return;\r\n    if (clientIsCreator) {\r\n      updateState((draftState) => {\r\n        draftState.lifeCycleStage = -1;\r\n      });\r\n      socket.emit(\"createGame\", state.timeControl, state.names[creatorIndex]);\r\n    }\r\n    if (!clientIsCreator) {\r\n      updateState((draftState) => {\r\n        draftState.lifeCycleStage = -1;\r\n      });\r\n      socket.emit(\"joinGame\", state.gameId, state.names[joinerIndex]);\r\n    }\r\n  });\r\n\r\n  //process server messages\r\n  useEffect(() => {\r\n    socket.once(\"gameCreated\", ({ gameId, creatorStarts }) => {\r\n      updateState((draftState) => {\r\n        //if life cycle stage is already 0, it means we already processed the response\r\n        if (draftState.lifeCycleStage === 0) return;\r\n        draftState.gameId = gameId;\r\n        draftState.creatorStarts = creatorStarts;\r\n        draftState.lifeCycleStage = 0;\r\n      });\r\n    });\r\n    socket.once(\"gameJoined\", ({ creatorStarts, creatorName, timeControl }) => {\r\n      updateState((draftState) => {\r\n        console.log(`game joined`);\r\n        //if life cycle stage is already 1, it means we already joined\r\n        if (draftState.lifeCycleStage === 1) return;\r\n        draftState.creatorStarts = creatorStarts;\r\n        draftState.names[creatorIndex] = creatorName;\r\n        draftState.timeControl = timeControl;\r\n        draftState.timeLeft = [\r\n          timeControl.duration * 60,\r\n          timeControl.duration * 60,\r\n        ];\r\n        draftState.moveHistory[0].timeLeft = [\r\n          timeControl.duration * 60,\r\n          timeControl.duration * 60,\r\n        ];\r\n        draftState.lifeCycleStage = 1;\r\n      });\r\n    });\r\n    socket.once(\"joinerJoined\", (joinerName) => {\r\n      updateState((draftState) => {\r\n        //if life cycle stage is already 1, it means the joiner already joined\r\n        if (draftState.lifeCycleStage === 1) return;\r\n        draftState.names[joinerIndex] = joinerName;\r\n        draftState.lifeCycleStage = 1;\r\n      });\r\n    });\r\n    socket.on(\"rematchStarted\", (gameId) => {\r\n      console.log(\"rematch started\");\r\n      updateState((draftState) => {\r\n        draftState.gameId = gameId;\r\n        draftState.creatorStarts = !draftState.creatorStarts;\r\n        draftState.playerPos = initialPlayerPos;\r\n        draftState.grid = emptyGrid(dims);\r\n        draftState.timeLeft = [\r\n          draftState.timeControl.duration * 60,\r\n          draftState.timeControl.duration * 60,\r\n        ];\r\n        draftState.moveHistory = [\r\n          {\r\n            index: 0,\r\n            actions: [],\r\n            grid: emptyGrid(dims),\r\n            playerPos: initialPlayerPos,\r\n            timeLeft: [\r\n              draftState.timeControl.duration * 60,\r\n              draftState.timeControl.duration * 60,\r\n            ],\r\n            distances: [\r\n              distance(emptyGrid(dims), initialPlayerPos[0], goals[0]),\r\n              distance(emptyGrid(dims), initialPlayerPos[1], goals[1]),\r\n            ],\r\n            wallCounts: [0, 0],\r\n          },\r\n        ];\r\n        draftState.winner = \"\";\r\n        draftState.finishReason = \"\";\r\n        draftState.lifeCycleStage = 1;\r\n        draftState.viewIndex = 0;\r\n        draftState.ghostAction = null;\r\n      });\r\n    });\r\n    socket.on(\"playerResigned\", (resignerIsCreator) => {\r\n      updateState((draftState) => {\r\n        draftState.lifeCycleStage = 4;\r\n        draftState.winner = resignerIsCreator ? \"joiner\" : \"creator\";\r\n        draftState.finishReason = \"resign\";\r\n        draftState.ghostAction = null;\r\n      });\r\n    });\r\n    socket.on(\"move\", (actions, moveIndex, receivedTime) => {\r\n      updateState((draftState) => {\r\n        console.log(`move ${moveIndex} received ${receivedTime}`);\r\n        makeMove(\r\n          draftState,\r\n          actions,\r\n          moveIndex,\r\n          receivedTime,\r\n          state.isVolumeOn\r\n        );\r\n      });\r\n    });\r\n    return () => {\r\n      socket.removeAllListeners();\r\n    };\r\n  }, [socket, updateState, clientIsCreator, state.gameId, state.isVolumeOn]);\r\n\r\n  //timer interval to update clocks every second\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      updateState((draftState) => {\r\n        //clocks only run after each player have made the first move, and the game has not ended\r\n        if (draftState.lifeCycleStage !== 3) return;\r\n        const idx = indexToMove(draftState);\r\n        draftState.timeLeft[idx] -= 1;\r\n        if (draftState.timeLeft[idx] === 0) {\r\n          draftState.winner = idx === 0 ? \"joiner\" : \"creator\";\r\n          draftState.finishReason = \"time\";\r\n          draftState.lifeCycleStage = 4;\r\n        }\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [updateState]);\r\n\r\n  //part of the logic of handleSelectedPosition:\r\n  //when the player selects / clicks a cell, it can trigger a different\r\n  //number of actions (1 action: build 1 wall or move 1 step)\r\n  //this function counts the number of actions for a clicked position\r\n  const clickActionCount = (clickPos) => {\r\n    const idx = indexToMove(state);\r\n    const clickType = cellTypeByPos(clickPos);\r\n    if (clickType === \"Ground\") {\r\n      return distance(state.grid, state.playerPos[idx], clickPos);\r\n    }\r\n    if (clickType === \"Wall\") {\r\n      //copy to preserve immutability of state, since we may need to modify the\r\n      //grid / player positions to account for ghost actions\r\n      const gridCopy = cloneDeep(state.grid);\r\n      const playerPosCopy = cloneDeep(state.playerPos);\r\n      const gType = ghostType(state.ghostAction);\r\n      if (gType === \"Wall\") {\r\n        //block ghost wall for the check\r\n        gridCopy[state.ghostAction.r][state.ghostAction.c] = 1;\r\n      } else if (gType === \"Ground\") {\r\n        //use ghost position for the check\r\n        playerPosCopy[idx] = state.ghostAction;\r\n      }\r\n      return canBuildWall(gridCopy, playerPosCopy, goals, clickPos) ? 1 : 0;\r\n    }\r\n    console.error(\"unexpected action type\", clickType);\r\n  };\r\n\r\n  //manage the state change on click or keyboard press. this may\r\n  //change the ghost action (which is only shown to this client),\r\n  //or make a full move, in which case it is applied to both clients\r\n  const handleSelectedPosition = (pos) => {\r\n    const thisClientToMove = clientIsCreator === creatorToMove(state);\r\n    if (!thisClientToMove) return; //can only move if it's your turn\r\n    if (state.lifeCycleStage < 1) return; //cannot move til player 2 joins\r\n    if (state.lifeCycleStage > 3) return; //cannot move if game finished\r\n    //can only move if looking at current position\r\n    if (state.viewIndex !== turnCount(state)) return;\r\n    //out of bounds, can happen when using the keyboard\r\n    if (pos.r < 0 || pos.r >= dims.h || pos.c < 0 || pos.c >= dims.w) return;\r\n\r\n    const clickType = cellTypeByPos(pos);\r\n    //there's a rule that the first move by each player must be a move\r\n    if (state.lifeCycleStage < 3 && clickType === \"Wall\") return;\r\n\r\n    const actCount = clickActionCount(pos);\r\n    const gType = ghostType(state.ghostAction);\r\n\r\n    //variables to store the outcome of the click, if any.\r\n    //in the case analysis below, if we detect that the click does\r\n    //not trigger any change, we simply return\r\n    //see docs/moveLogic.md for the description of the case analysis\r\n    let [fullMoveActions, newGhostAction] = [null, null];\r\n\r\n    if (gType === \"None\") {\r\n      if (clickType === \"Wall\") {\r\n        if (actCount === 1) newGhostAction = pos;\r\n        else return;\r\n      } else if (clickType === \"Ground\") {\r\n        if (actCount === 1) newGhostAction = pos;\r\n        else if (actCount === 2) fullMoveActions = [pos];\r\n        else return;\r\n      } else {\r\n        console.error(\"unexpected action type\", clickType);\r\n      }\r\n    } else if (gType === \"Wall\") {\r\n      if (clickType === \"Wall\") {\r\n        if (posEq(state.ghostAction, pos)) newGhostAction = null;\r\n        else if (actCount === 1) fullMoveActions = [pos, state.ghostAction];\r\n        else return;\r\n      } else if (clickType === \"Ground\") {\r\n        if (actCount === 1) fullMoveActions = [pos, state.ghostAction];\r\n        else return;\r\n      } else {\r\n        console.error(\"unexpected action type\", clickType);\r\n      }\r\n    } else if (gType === \"Ground\") {\r\n      if (clickType === \"Wall\") {\r\n        if (actCount === 1) fullMoveActions = [pos, state.ghostAction];\r\n        else return;\r\n      } else if (clickType === \"Ground\") {\r\n        if (actCount === 0) newGhostAction = null;\r\n        else if (actCount === 1) {\r\n          if (posEq(pos, state.ghostAction)) return;\r\n          newGhostAction = pos;\r\n        } else if (actCount === 2) fullMoveActions = [pos];\r\n        else return;\r\n      } else {\r\n        console.error(\"unexpected action type\", clickType);\r\n      }\r\n    } else {\r\n      console.error(\"unexpected ghost type\", gType);\r\n    }\r\n\r\n    if (fullMoveActions) {\r\n      const idx = indexToMove(state);\r\n      let tLeft = state.timeLeft[idx];\r\n      //we don't add the increment until the clocks start running (stage 3)\r\n      if (state.lifeCycleStage === 3) tLeft += state.timeControl.increment;\r\n      socket.emit(\"move\", fullMoveActions, tLeft);\r\n      updateState((draftState) => {\r\n        makeMove(\r\n          draftState,\r\n          fullMoveActions,\r\n          turnCount(state) + 1,\r\n          tLeft,\r\n          state.isVolumeOn\r\n        );\r\n      });\r\n    } else {\r\n      updateState((draftState) => {\r\n        draftState.ghostAction = newGhostAction;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = (clickedPos) => handleSelectedPosition(clickedPos);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  });\r\n\r\n  const downHandler = ({ key }) => {\r\n    if (state.isKeyPressed) return;\r\n    updateState((draftState) => {\r\n      draftState.isKeyPressed = true;\r\n    });\r\n\r\n    if (state.viewIndex < turnCount(state)) {\r\n      if (key === \"ArrowDown\" || key === \"ArrowRight\") {\r\n        updateState((draftState) => {\r\n          draftState.viewIndex += 1;\r\n        });\r\n      } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\r\n        if (state.viewIndex > 0) {\r\n          updateState((draftState) => {\r\n            draftState.viewIndex -= 1;\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      let p;\r\n      if (state.ghostAction && ghostType(state.ghostAction) === \"Ground\")\r\n        p = state.ghostAction;\r\n      else p = state.playerPos[indexToMove(state)];\r\n      if (key === \"ArrowDown\") p = { r: p.r + 2, c: p.c };\r\n      else if (key === \"ArrowUp\") p = { r: p.r - 2, c: p.c };\r\n      else if (key === \"ArrowLeft\") p = { r: p.r, c: p.c - 2 };\r\n      else if (key === \"ArrowRight\") p = { r: p.r, c: p.c + 2 };\r\n      else return;\r\n      handleSelectedPosition(p);\r\n    }\r\n  };\r\n  const upHandler = () => {\r\n    updateState((draftState) => {\r\n      draftState.isKeyPressed = false;\r\n    });\r\n  };\r\n\r\n  const handleEndSession = () => {\r\n    //tell the server to stop listening to moves for this game\r\n    socket.emit(\"endGame\", state.gameId);\r\n    returnToLobby();\r\n  };\r\n  const handleRematch = () => {\r\n    socket.emit(\"rematch\", state.gameId);\r\n  };\r\n  const handleOfferDraw = () => {};\r\n  const handleProposeTakeback = () => {};\r\n  const handleResign = () => {\r\n    socket.emit(\"resign\", state.gameId);\r\n  };\r\n  const handleIncreaseOpponentTime = () => {};\r\n\r\n  const handleViewMove = (i) => {\r\n    if (i < 0 || i > turnCount(state)) return;\r\n    updateState((draftState) => {\r\n      if (draftState.viewIndex === i) return;\r\n      if (i > turnCount(draftState)) return;\r\n      draftState.viewIndex = i;\r\n      draftState.ghostAction = null;\r\n    });\r\n  };\r\n\r\n  //move the inner scroll bar on move history to the end after each move\r\n  useEffect(() => {\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = moveHistoryDiv.scrollHeight;\r\n  }, [state.moveHistory]);\r\n\r\n  const handleSeePreviousMove = () => handleViewMove(state.viewIndex - 1);\r\n  const handleSeeNextMove = () => handleViewMove(state.viewIndex + 1);\r\n  const handleSeeFirstMove = () => {\r\n    handleViewMove(0);\r\n    //move the inner scroll bar to the beginning\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = 0;\r\n  };\r\n  const handleSeeLastMove = () => {\r\n    handleViewMove(turnCount(state));\r\n    //move the inner scroll bar to the end\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = moveHistoryDiv.scrollHeight;\r\n  };\r\n  const handleIncreaseBoardSize = () => {\r\n    updateState((draftState) => {\r\n      if (draftState.zoomLevel < 10) draftState.zoomLevel += 1;\r\n    });\r\n  };\r\n  const handleDecreaseBoardSize = () => {\r\n    updateState((draftState) => {\r\n      if (draftState.zoomLevel > 0) draftState.zoomLevel -= 1;\r\n    });\r\n  };\r\n\r\n  let isLargeScreen = useMediaQuery({ query: \"(min-width: 990px)\" });\r\n  let [gSize, wWidth] = [groundSize, wallWidth];\r\n  if (!isLargeScreen) {\r\n    //make it easier to click on walls\r\n    gSize -= 3;\r\n    wWidth += 3;\r\n  }\r\n  const scalingFactor = Math.pow(1.1, state.zoomLevel - 5);\r\n  const scaledGroundSize = gSize * scalingFactor;\r\n  const scaledWallWidth = wWidth * scalingFactor;\r\n  const boardHeight =\r\n    (scaledWallWidth * (dims.h - 1)) / 2 +\r\n    (scaledGroundSize * (dims.h + 1)) / 2;\r\n  const boardWidth =\r\n    (scaledWallWidth * (dims.w - 1)) / 2 +\r\n    (scaledGroundSize * (dims.w + 1)) / 2;\r\n  const gapSize = 15;\r\n\r\n  let gridTemplateRows, gridTemplateColumns, gridTemplateAreas;\r\n  if (isLargeScreen) {\r\n    gridTemplateRows = `100px ${boardHeight}px`;\r\n    gridTemplateColumns = `${boardWidth}px 360px`;\r\n    gridTemplateAreas = \"'timer status' 'board panel'\";\r\n  } else {\r\n    gridTemplateRows = `repeat(2, 100px ${boardHeight}px)`;\r\n    gridTemplateColumns = `${boardWidth}px`;\r\n    gridTemplateAreas = \"'timer' 'board' 'status' 'panel'\";\r\n  }\r\n\r\n  return (\r\n    <div className={state.isDarkModeOn ? \"teal darken-4\" : undefined}>\r\n      <Header\r\n        gameName={state.gameId}\r\n        showLobby\r\n        endGame={handleEndSession}\r\n        helpText={GameHelp()}\r\n        isLargeScreen={isLargeScreen}\r\n        isDarkModeOn={state.isDarkModeOn}\r\n      />\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateRows: gridTemplateRows,\r\n          gridTemplateColumns: gridTemplateColumns,\r\n          gridTemplateAreas: gridTemplateAreas,\r\n          columnGap: `${gapSize}px`,\r\n          rowGap: `${gapSize}px`,\r\n          margin: `${gapSize}px`,\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n        }}\r\n      >\r\n        <TimerHeader\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          names={state.names}\r\n          indexToMove={indexToMove(state)}\r\n          playerColors={playerColors}\r\n          timeLeft={state.timeLeft}\r\n        />\r\n        <StatusHeader\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          names={state.names}\r\n          indexToMove={indexToMove(state)}\r\n          winner={state.winner}\r\n          finishReason={state.finishReason}\r\n          timeControl={state.timeControl}\r\n          creatorStarts={state.creatorStarts}\r\n        />\r\n        <Board\r\n          creatorToMove={creatorToMove(state)}\r\n          playerColors={playerColors}\r\n          grid={state.moveHistory[state.viewIndex].grid}\r\n          playerPos={state.moveHistory[state.viewIndex].playerPos}\r\n          goals={goals}\r\n          ghostAction={state.ghostAction}\r\n          handleClick={handleClick}\r\n          groundSize={scaledGroundSize}\r\n          wallWidth={scaledWallWidth}\r\n          isDarkModeOn={state.isDarkModeOn}\r\n        />\r\n        <ControlPanel\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          handleResign={handleResign}\r\n          handleOfferDraw={handleOfferDraw}\r\n          handleProposeTakeback={handleProposeTakeback}\r\n          handleIncreaseOpponentTime={handleIncreaseOpponentTime}\r\n          moveHistory={state.moveHistory}\r\n          playerColors={playerColors}\r\n          creatorStarts={state.creatorStarts}\r\n          handleViewMove={handleViewMove}\r\n          viewIndex={state.viewIndex}\r\n          handleSeeFirstMove={handleSeeFirstMove}\r\n          handleSeePreviousMove={handleSeePreviousMove}\r\n          handleSeeNextMove={handleSeeNextMove}\r\n          handleSeeLastMove={handleSeeLastMove}\r\n          handleToggleVolume={handleToggleVolume}\r\n          isVolumeOn={state.isVolumeOn}\r\n          handleToggleDarkMode={handleToggleDarkMode}\r\n          isDarkModeOn={state.isDarkModeOn}\r\n          handleIncreaseBoardSize={handleIncreaseBoardSize}\r\n          handleDecreaseBoardSize={handleDecreaseBoardSize}\r\n          zoomLevel={state.zoomLevel}\r\n          boardHeight={boardHeight}\r\n        />\r\n      </div>\r\n      {state.lifeCycleStage === 4 && (\r\n        <Row className=\"valign-wrapper\" style={{ marginTop: \"1rem\" }}>\r\n          <Col className=\"center\" s={12}>\r\n            <Button\r\n              large\r\n              className=\"red\"\r\n              node=\"button\"\r\n              waves=\"light\"\r\n              onClick={handleRematch}\r\n            >\r\n              Rematch\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <Modal\r\n        style={{ color: \"black\" }}\r\n        actions={[\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#009688\",\r\n              color: \"white\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            flat\r\n            modal=\"close\"\r\n            node=\"button\"\r\n            waves=\"green\"\r\n            onClick={handleConfirmBackButton}\r\n          >\r\n            Quit game\r\n          </Button>,\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#009688\",\r\n              color: \"white\",\r\n            }}\r\n            flat\r\n            modal=\"close\"\r\n            node=\"button\"\r\n            waves=\"green\"\r\n            onClick={handleCancelBackButton}\r\n          >\r\n            Close\r\n          </Button>,\r\n        ]}\r\n        bottomSheet={false}\r\n        fixedFooter={false}\r\n        header=\"Return to lobby\"\r\n        open={state.showBackButtonWarning}\r\n        options={{\r\n          dismissible: false,\r\n          endingTop: \"10%\",\r\n          inDuration: 250,\r\n          opacity: 0.4,\r\n          outDuration: 250,\r\n          preventScrolling: true,\r\n          startingTop: \"4%\",\r\n        }}\r\n      >\r\n        {\r\n          <p>\r\n            Are you sure you want to return to the lobby? You will not be able\r\n            to rejoin this game.\r\n          </p>\r\n        }\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\r\nimport { Row, Col, TextInput, Button, Icon } from \"react-materialize\";\r\n\r\nconst LobbyForm = ({\r\n  playerName,\r\n  handlePlayerName,\r\n  duration,\r\n  handleDuration,\r\n  increment,\r\n  handleIncrement,\r\n  joinGameId,\r\n  handleJoinGameId,\r\n  handleCreateGame,\r\n  handleJoinGame,\r\n  handleRefreshName,\r\n}) => {\r\n  return (\r\n    <div className=\"container teal darken-2\" style={{ marginTop: \"2rem\" }}>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={3}>\r\n          <h5>Your name:</h5>\r\n        </Col>\r\n        <Col s={3}>\r\n          <TextInput\r\n            id=\"nameInput\"\r\n            value={playerName}\r\n            onChange={handlePlayerName}\r\n          />\r\n        </Col>\r\n        <Col s={1}>\r\n          <Button\r\n            className=\"teal lighten-2\"\r\n            node=\"button\"\r\n            waves=\"light\"\r\n            small\r\n            floating\r\n            style={{ color: \"white\" }}\r\n            icon={<Icon>refresh</Icon>}\r\n            onClick={handleRefreshName}\r\n            tooltip={\"Get a new name\"}\r\n          />\r\n        </Col>\r\n        <Col s={5}></Col>\r\n      </Row>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={3}>\r\n          <Button node=\"button\" waves=\"light\" onClick={handleCreateGame}>\r\n            Create game\r\n          </Button>\r\n        </Col>\r\n        <Col s={1} style={{ paddingRight: \"0\" }}>\r\n          <TextInput\r\n            id=\"durationInput\"\r\n            label=\"Duration\"\r\n            value={`${duration}`}\r\n            onChange={handleDuration}\r\n          />\r\n        </Col>\r\n        <Col s={1} style={{ paddingLeft: \"0\" }}>\r\n          m\r\n        </Col>\r\n        <Col s={1} style={{ paddingRight: \"0\" }}>\r\n          <TextInput\r\n            id=\"incrementInput\"\r\n            label=\"Increment\"\r\n            value={`${increment}`}\r\n            onChange={handleIncrement}\r\n          />\r\n        </Col>\r\n        <Col s={1} style={{ paddingLeft: \"0\" }}>\r\n          s\r\n        </Col>\r\n        <Col s={5}></Col>\r\n      </Row>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={3}>\r\n          <Button node=\"button\" waves=\"light\" onClick={handleJoinGame}>\r\n            Join game\r\n          </Button>\r\n        </Col>\r\n        <Col s={5}>\r\n          <TextInput\r\n            id=\"joinInput\"\r\n            placeholder=\"Write game code here...\"\r\n            value={`${joinGameId}`}\r\n            onChange={handleJoinGameId}\r\n          />\r\n        </Col>\r\n        <Col s={4}></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyForm;\r\n","import React from \"react\";\r\n\r\nconst LobbyHelp = () => (\r\n  <div>\r\n    <h6>\r\n      This is the lobby. Here, you can create games that your friends can join,\r\n      or join a friend's game. Click on the code to copy it to the clipboard.\r\n    </h6>\r\n    <h6>\r\n      When you create a game, you can choose the <em>duration</em> (the time\r\n      that each player has) and a time<em>increment</em> that is added to each\r\n      player after they move.\r\n    </h6>\r\n    <h6>\r\n      Once you create a game, a <em>game code</em> will appear in the top\r\n      header. Share this code with your friend to play with them.\r\n    </h6>\r\n    <h6>\r\n      To join a friend's game, write the code they give you in the box next to\r\n      the \"Join game\" button and click it.\r\n    </h6>\r\n    <h6>\r\n      A random <em>username</em> has been chosen for you, but you can change it.\r\n    </h6>\r\n  </div>\r\n);\r\n\r\nexport default LobbyHelp;\r\n","import React, { useState } from \"react\";\r\nimport { uniqueNamesGenerator, names } from \"unique-names-generator\";\r\n\r\nimport GamePage from \"../game/GamePage\";\r\nimport Header from \"../shared/Header\";\r\nimport LobbyForm from \"./LobbyForm\";\r\nimport LobbyHelp from \"./LobbyHelp\";\r\n\r\nconst maxPlayerNameLen = 9;\r\n\r\nconst randPlayerName = () =>\r\n  uniqueNamesGenerator({\r\n    dictionaries: [names],\r\n    length: 1,\r\n  }).slice(0, maxPlayerNameLen);\r\n\r\nconst LobbyPage = ({ socket }) => {\r\n  const [playerName, setPlayerName] = useState(randPlayerName());\r\n  const [duration, setDuration] = useState(5);\r\n  const [increment, setIncrement] = useState(5);\r\n  const [joinGameId, setJoinGameId] = useState(\"\");\r\n  const [isOngoingGame, setIsOngoingGame] = useState(false);\r\n  const [creatorParams, setCreatorParams] = useState(null);\r\n  const [joinerParams, setJoinerParams] = useState(null);\r\n\r\n  const handlePlayerName = (props) => {\r\n    setPlayerName(props.target.value.slice(0, maxPlayerNameLen));\r\n  };\r\n\r\n  const handleRefreshName = () => {\r\n    setPlayerName(randPlayerName());\r\n  };\r\n  const handleDuration = (props) => setDuration(props.target.value);\r\n  const handleIncrement = (props) => setIncrement(props.target.value);\r\n  const handleJoinGameId = (props) => setJoinGameId(props.target.value);\r\n\r\n  const handleCreateGame = () => {\r\n    let [dur, inc] = [parseFloat(duration), parseFloat(increment)];\r\n    if (isNaN(dur) || dur < 0.1) {\r\n      dur = 5 / 60;\r\n      console.log(\r\n        \"given duration is not a number, using default value instead\"\r\n      );\r\n    }\r\n    if (isNaN(inc) || inc < 0) {\r\n      inc = 0;\r\n      console.log(\r\n        \"given increment is not a number, using default value instead\"\r\n      );\r\n    }\r\n    setCreatorParams({\r\n      timeControl: {\r\n        duration: dur,\r\n        increment: inc,\r\n      },\r\n      creatorName: playerName === \"\" ? \"Anon\" : playerName,\r\n    });\r\n    setIsOngoingGame(true);\r\n  };\r\n  const handleJoinGame = () => {\r\n    setJoinerParams({\r\n      gameId: joinGameId,\r\n      joinerName: playerName === \"\" ? \"Anon\" : playerName,\r\n    });\r\n    setIsOngoingGame(true);\r\n  };\r\n\r\n  const returnToLobby = () => {\r\n    setIsOngoingGame(false);\r\n    setCreatorParams(null);\r\n    setJoinerParams(null);\r\n    setJoinGameId(\"\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: \"2rem\" }}>\r\n      {isOngoingGame && (\r\n        <GamePage\r\n          socket={socket}\r\n          creatorParams={creatorParams}\r\n          joinerParams={joinerParams}\r\n          returnToLobby={returnToLobby}\r\n        />\r\n      )}\r\n      {!isOngoingGame && (\r\n        <div>\r\n          <Header gameName={\"\"} helpText={LobbyHelp()} />\r\n          <LobbyForm\r\n            playerName={playerName}\r\n            handlePlayerName={handlePlayerName}\r\n            duration={duration}\r\n            handleDuration={handleDuration}\r\n            increment={increment}\r\n            handleIncrement={handleIncrement}\r\n            joinGameId={joinGameId}\r\n            handleJoinGameId={handleJoinGameId}\r\n            handleCreateGame={handleCreateGame}\r\n            handleJoinGame={handleJoinGame}\r\n            handleRefreshName={handleRefreshName}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyPage;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport socketIoClient from \"socket.io-client\";\r\n\r\nimport LobbyPage from \"./lobby/LobbyPage\";\r\n\r\nconst App = () => {\r\n  const BACKEND_ENDPOINT =\r\n    process.env.REACT_APP_BACKEND_URL || \"localhost:4001\";\r\n  console.log(`connecting to backend at ${BACKEND_ENDPOINT}`);\r\n  const [socket] = useState(socketIoClient(BACKEND_ENDPOINT));\r\n\r\n  //every route redirects back to '/', which is both the lobby and the game page\r\n  return (\r\n    <React.StrictMode>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/wallwars/index.html\" exact>\r\n            <LobbyPage socket={socket} />\r\n          </Route>\r\n          <Redirect to=\"/wallwars/index.html\" />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </React.StrictMode>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/moveSound.6df49e4b.mp3\";"],"sourceRoot":""}