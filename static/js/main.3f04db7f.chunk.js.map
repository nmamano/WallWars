{"version":3,"sources":["shared/globalSettings.js","shared/showToastNotification.js","gameLogic/mainLogic.js","game/Board.js","shared/IconButton.js","shared/Header.js","shared/Dialog.js","game/StatusHeader.js","game/TimerHeader.js","game/GameHelp.js","game/MoveHistory.js","game/ControlPanel.js","game/GamePage.js","lobby/LobbyForm.js","lobby/LobbyHelp.js","lobby/GameShowcase.js","lobby/RecentGameList.js","lobby/LobbyPage.js","App.js","index.js","static/moveSound.mp3"],"names":["corners","tl","r","c","tr","w","bl","h","br","boardDims","boardCorners","initialPlayerPos","goals","playerColors","groundSize","wallWidth","smallScreenGroundSize","smallScreenWallWidth","showToastNotification","text","duration","toast","autoClose","hideProgressBar","transition","Slide","pauseOnFocusLoss","cellTypeByPos","pos","posEq","pos1","pos2","emptyGrid","dims","grid","inBounds","isWallBuilt","accessibleNeighbors","length","dimensions","dirs","res","pr","pc","k","dr","dc","adjWall","adjGround","push","distance","start","target","C","posToKey","queue","i","dist","Map","set","nbrs","nbr","has","get","isDistanceAtMost","maxDistance","dis","canReach","canBuildWall","playerPos","isValidBoard","displayParams","Board","ghostAction","premoveActions","color1","color2","p1","p2","g1","g2","handleClick","creatorToMove","isDarkModeOn","allPos","icon1","icon2","repRows","repCols","useState","hoveredCell","setHoveredCell","handleMouseLeave","iconSize","coordColor","style","display","gridTemplateColumns","gridTemplateRows","justifyContent","gridArea","MozUserSelect","webkitUserSelect","msUserSelect","userSelect","map","color","p1Here","p2Here","goal1Here","goal2Here","ghostHere","premoveHere","p1GhostHere","p2GhostHere","cellType","invert","className","ghostOrPlayerHere","coordFits","letterCoordHere","numberCoordHere","coordHere","solidWallHere","alignItems","key","onClick","onMouseEnter","handleMouseEnter","onMouseLeave","backgroundColor","cursor","borderTop","borderBottom","borderLeft","borderRight","fontSize","padding","marginLeft","String","fromCharCode","marginRight","IconButton","actions","icon","tooltip","modalTitle","modalBody","modalConfirmButtonText","bgColor","disabled","node","waves","flat","modal","trigger","bottomSheet","fixedFooter","header","open","options","dismissible","endingTop","inDuration","opacity","outDuration","preventScrolling","startingTop","Header","brand","gameName","helpText","isLargeScreen","handleToggleDarkMode","onCopy","aboutText","height","columnGap","rowGap","Dialog","title","body","acceptButtonText","rejectButtonText","isOpen","callback","StatusHeader","msg","names","lifeCycleStage","winner","finishReason","indexToMove","timeControl","creatorStarts","nameToMove","goal","agreement","time","resign","disconnect","console","error","roundNum","num","Math","round","Number","EPSILON","increment","TimerHeader","timeLeft","scores","floor","min1","min2","sec1","sec2","timesAsStrings","highlightNameToMove","highlightLowTime","sep","showScores","childStyle","alignContent","GameHelp","thStyle","position","top","paddingTop","paddingBottom","borderRadius","tdStyle","MoveHistory","moveHistory","handleViewMove","viewIndex","id","overflowY","centered","width","move","undefined","index","wallCount","moveToString","distances","wallCounts","GameControlPanel","handleResign","handleOfferDraw","handleRequestTakeback","handleGiveExtraTime","clientRole","turnCount","handleSeeFirstMove","handleSeePreviousMove","handleSeeNextMove","handleSeeLastMove","handleToggleVolume","isVolumeOn","handleLeaveGame","handleIncreaseBoardSize","handleDecreaseBoardSize","zoomLevel","moveHistoryHeight","boardHeight","buttonHeight","gapHeight","takebackEnabled","isSpectator","gridColumnStart","gridColumnEnd","moveSound","UIfx","moveSoundAudio","playMoveSound","play","globalSettings","state","ghostType","countActions","selectedPos","posActor","posOther","goalActor","goalOther","extraWalls","gridCopy","cloneDeep","W","applyCookieSettings","draftState","cookies","zoomVal","parseInt","applyAddCreator","creatorName","totalTimeInSeconds","applyCreatedOnServer","joinCode","applyJoinerJoined","joinerName","applyMove","timeLeftAfterMove","moveIndex","tc","idxToMove","otherIdx","newPlayerPos","newGrid","newTimeLeft","aPos","aType","pToMoveStarted","otherIsWithinOneMove","gameWins","acts","applySelectedCell","clientToMove","shouldPlaySound","selectedType","idx","gType","curPos","actCount","fullMoveActions","newGhostAction","tLeft","moveToSend","remainingTime","applySelectedCellPremove","premoveWalls","premoveGround","act","premoveGroundDist","premoveState","newPremoveActions","W2","closeDialogs","showRematchDialog","showDrawDialog","showTakebackDialog","applyDrawGame","applyResignGame","resignerIsCreator","applyTakeback","requesterIsCreator","numMovesToUndo","pop","applySetupRematch","applyAddExtraTime","playerIndex","GamePage","socket","clientParams","returnToLobby","useCookies","setCookie","useImmer","opponentLeft","showBackButtonWarning","isKeyPressed","createInitialState","updateState","useEffect","once","startSeconds","applyJoinedOnServer","game","serverGame","playerNames","applyReceivedGame","on","log","leaverIsCreator","applyLeaveGame","removeAllListeners","emit","applyAddJoiner","gameId","interval","setInterval","applyClockTick","clearInterval","handleSelectedCell","window","addEventListener","downHandler","upHandler","removeEventListener","p","moveHistoryDiv","document","getElementById","scrollTop","scrollHeight","displayTime1","displayTime2","path","onBackButtonEvent","e","preventDefault","history","pushState","location","pathname","gridTemplateAreas","gSize","wWidth","scalingFactor","pow","scaledGroundSize","scaledWallWidth","boardWidth","gapSize","margin","clickedPos","ControlPanel","marginTop","s","large","confirmed","accepted","LobbyForm","playerName","handlePlayerName","handleDuration","handleIncrement","handleJoinCode","handleCreateGame","handleJoinGame","handleRefreshName","m","value","onChange","small","floating","paddingRight","label","paddingLeft","placeholder","LobbyHelp","GameShowcase","handleViewGame","nextMove","needToRequestGame","finishedGameWait","_id","timeControlToString","prettyDate","date","longFormat","curTime","Date","getTime","dateTime","seconds","toDateString","substring","RecentGameList","recentGames","setRecentGames","needToRequestGames","setNeedToRequestGames","games","border","k2","finalDistsToString","startDate","randPlayerName","uniqueNamesGenerator","dictionaries","slice","LobbyPage","setPlayerName","setDuration","setIncrement","setJoinCode","isOngoingGame","setIsOngoingGame","setClientParams","setIsDarkModeOn","watchGameId","backgroundColors","useMediaQuery","query","props","parseFloat","dur","inc","isNaN","name","alignSelf","justifySelf","App","process","socketIoClient","StrictMode","CookiesProvider","exact","to","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.3f04db7f.chunk.js","sourcesContent":["//settings that, for now, are fixed\r\n\r\nconst [w, h] = [23, 19];\r\nconst corners = {\r\n  tl: { r: 0, c: 0 },\r\n  tr: { r: 0, c: w - 1 },\r\n  bl: { r: h - 1, c: 0 },\r\n  br: { r: h - 1, c: w - 1 },\r\n};\r\n\r\nexport default {\r\n  boardDims: { w: w, h: h },\r\n  boardCorners: corners,\r\n  //most data structures related to the players use an array\r\n  //of length 2, with the data for the creator first\r\n  initialPlayerPos: [corners.tl, corners.tr],\r\n  goals: [corners.br, corners.bl],\r\n  playerColors: [\"red\", \"indigo\"],\r\n  groundSize: 37, //in pixels\r\n  wallWidth: 12, //in pixels\r\n  smallScreenGroundSize: 23,\r\n  smallScreenWallWidth: 10,\r\n};\r\n","import { toast, Slide } from \"react-toastify\";\r\n\r\nconst showToastNotification = (text, duration) => {\r\n  if (!duration || duration === 0) duration = 2500;\r\n  toast(text, {\r\n    autoClose: duration,\r\n    hideProgressBar: true,\r\n    transition: Slide,\r\n    pauseOnFocusLoss: false,\r\n  });\r\n};\r\n\r\nexport default showToastNotification;\r\n","/* In-game coordinate system:\r\nWalls and junctions between four cells (called pillars) also count for the coordinate\r\nsystem, so the number of rows/columns with \"walkable\" cells (called ground cells) is\r\nactually half of the board's size (rounding up). Both dimensions of the board should\r\nbe odd, as they start and end with a row / column of walkable cells.\r\nThe first coordinate is the row (y-axis / height), denoted with variable r by convention.\r\nThe second coordinate is the column (x-axis / width), denoted with variable c by convention.\r\n*/\r\n\r\nexport function cellTypeByPos(pos) {\r\n  if (pos.r % 2 === 0 && pos.c % 2 === 0) return \"Ground\";\r\n  if (pos.r % 2 === 0 && pos.c % 2 === 1) return \"Wall\";\r\n  if (pos.r % 2 === 1 && pos.c % 2 === 0) return \"Wall\";\r\n  return \"Pillar\"; //case i%2 === 1 && j%2 === 1\r\n}\r\n\r\nexport function posEq(pos1, pos2) {\r\n  return pos1.r === pos2.r && pos1.c === pos2.c;\r\n}\r\n\r\nfunction dimensions(grid) {\r\n  return { h: grid.length, w: grid[0].length };\r\n}\r\n\r\nexport function emptyGrid(dims) {\r\n  let grid = [];\r\n  for (let r = 0; r < dims.h; r++) {\r\n    grid[r] = [];\r\n    for (let c = 0; c < dims.w; c++) grid[r][c] = 0;\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction inBounds(pos, dims) {\r\n  return pos.r >= 0 && pos.r < dims.h && pos.c >= 0 && pos.c < dims.w;\r\n}\r\n\r\nfunction isWallBuilt(grid, pos) {\r\n  const cellType = cellTypeByPos(pos);\r\n  if (cellType !== \"Wall\") return false; //cannot check for wall here\r\n  return grid[pos.r][pos.c] !== 0;\r\n}\r\n\r\nfunction accessibleNeighbors(grid, pos) {\r\n  const dims = dimensions(grid);\r\n  if (cellTypeByPos(pos) !== \"Ground\") {\r\n    return []; //only ground coords can access neighbors\r\n  }\r\n  const dirs = [\r\n    { r: 0, c: 1 },\r\n    { r: 0, c: -1 },\r\n    { r: 1, c: 0 },\r\n    { r: -1, c: 0 },\r\n  ];\r\n  const res = [];\r\n  const [pr, pc] = [pos.r, pos.c];\r\n  for (let k = 0; k < dirs.length; k++) {\r\n    const [dr, dc] = [dirs[k].r, dirs[k].c];\r\n    const adjWall = { r: pr + dr, c: pc + dc };\r\n    const adjGround = { r: pr + 2 * dr, c: pc + 2 * dc };\r\n    if (inBounds(adjGround, dims) && !isWallBuilt(grid, adjWall)) {\r\n      res.push(adjGround);\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nexport function distance(grid, start, target) {\r\n  //implements bfs algorithm\r\n  if (posEq(start, target)) return 0;\r\n  const C = grid[0].length;\r\n  const posToKey = (pos) => pos.r * C + pos.c;\r\n\r\n  const queue = [];\r\n  let i = 0;\r\n  queue.push(start);\r\n  const dist = new Map();\r\n  dist.set(posToKey(start), 0);\r\n  while (i < queue.length) {\r\n    const pos = queue[i];\r\n    i += 1;\r\n    const nbrs = accessibleNeighbors(grid, pos);\r\n    for (let k = 0; k < nbrs.length; k++) {\r\n      let nbr = nbrs[k];\r\n      if (!dist.has(posToKey(nbr))) {\r\n        dist.set(posToKey(nbr), dist.get(posToKey(pos)) + 1);\r\n        if (posEq(nbr, target)) return dist.get(posToKey(nbr));\r\n        queue.push(nbr);\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n//same as distance, but with early termination\r\nexport function isDistanceAtMost(grid, start, target, maxDistance) {\r\n  //implements bfs algorithm\r\n  if (posEq(start, target)) return 0;\r\n  const C = grid[0].length;\r\n  const posToKey = (pos) => pos.r * C + pos.c;\r\n\r\n  const queue = [];\r\n  let i = 0;\r\n  queue.push(start);\r\n  const dist = new Map();\r\n  dist.set(posToKey(start), 0);\r\n  while (i < queue.length) {\r\n    const pos = queue[i];\r\n    i += 1;\r\n    const dis = dist.get(posToKey(pos));\r\n    if (dis > maxDistance) return false;\r\n    const nbrs = accessibleNeighbors(grid, pos);\r\n    for (let k = 0; k < nbrs.length; k++) {\r\n      let nbr = nbrs[k];\r\n      if (!dist.has(posToKey(nbr))) {\r\n        if (posEq(nbr, target)) return dis + 1 <= maxDistance;\r\n        dist.set(posToKey(nbr), dis + 1);\r\n        queue.push(nbr);\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction canReach(grid, start, target) {\r\n  return distance(grid, start, target) !== -1;\r\n}\r\n\r\n//can handle more than 2 players, which is not used for now\r\nfunction isValidBoard(grid, playerPos, goals) {\r\n  for (let k = 0; k < playerPos.length; k++) {\r\n    if (!canReach(grid, playerPos[k], goals[k])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function canBuildWall(grid, playerPos, goals, pos) {\r\n  if (isWallBuilt(grid, pos)) return false;\r\n  grid[pos.r][pos.c] = 1; //grid parameter is only modified in this scope\r\n  var res = isValidBoard(grid, playerPos, goals);\r\n  grid[pos.r][pos.c] = 0;\r\n  return res;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport invert from \"invert-color\";\r\n\r\nimport { cellTypeByPos, posEq } from \"../gameLogic/mainLogic\";\r\n\r\n//cosmetic parameters of the board\r\nconst displayParams = {\r\n  groundColor: \"#d2d2d2\",\r\n  groundHoverColor: \"#fbe4D6\",\r\n  emptyWallColor: \"#eaeaea\",\r\n  emptyWallHoverColor: \"#f1bfa0\",\r\n  pillarColor: \"#cccccc\",\r\n  playerIcons: [\"face\", \"outlet\"],\r\n  borderStyle: \"1px solid #00796d\",\r\n};\r\n\r\n//stateless component to display the board. all the state is at GamePage\r\nconst Board = ({\r\n  grid,\r\n  ghostAction,\r\n  premoveActions,\r\n  playerColors: [color1, color2],\r\n  playerPos: [p1, p2],\r\n  goals: [g1, g2],\r\n  handleClick,\r\n  creatorToMove,\r\n  groundSize,\r\n  wallWidth,\r\n  isDarkModeOn,\r\n}) => {\r\n  const dims = { h: grid.length, w: grid[0].length };\r\n  const allPos = [];\r\n  for (let r = 0; r < dims.h; r++)\r\n    for (let c = 0; c < dims.w; c++) allPos[r * dims.w + c] = { r: r, c: c };\r\n\r\n  const [icon1, icon2] = displayParams.playerIcons;\r\n  const [repRows, repCols] = [(dims.h - 1) / 2, (dims.w - 1) / 2];\r\n\r\n  const [hoveredCell, setHoveredCell] = useState(null);\r\n\r\n  const handleMouseEnter = (pos) => {\r\n    setHoveredCell(pos);\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setHoveredCell(null);\r\n  };\r\n  const iconSize = 0.8 * groundSize;\r\n  let coordColor = \"white\";\r\n  if (isDarkModeOn) coordColor = \"black\";\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${repCols}, ${groundSize}px ${wallWidth}px) ${groundSize}px`,\r\n        gridTemplateRows: `repeat(${repRows}, ${groundSize}px ${wallWidth}px) ${groundSize}px`,\r\n        justifyContent: \"center\",\r\n        gridArea: \"board\",\r\n        MozUserSelect: \"none\",\r\n        webkitUserSelect: \"none\",\r\n        msUserSelect: \"none\",\r\n        userSelect: \"none\",\r\n      }}\r\n    >\r\n      {allPos.map((pos) => {\r\n        const [p1Here, p2Here] = [posEq(pos, p1), posEq(pos, p2)];\r\n        const [goal1Here, goal2Here] = [posEq(pos, g1), posEq(pos, g2)];\r\n        //ghosts are the partial moves that are only displayed locally\r\n\r\n        const ghostHere = ghostAction !== null && posEq(ghostAction, pos);\r\n        const premoveHere =\r\n          (premoveActions.length > 0 && posEq(premoveActions[0], pos)) ||\r\n          (premoveActions.length > 1 && posEq(premoveActions[1], pos));\r\n\r\n        //premoves are treated as ghost moves with respect to displaying them\r\n        const [p1GhostHere, p2GhostHere] = [\r\n          (ghostHere && creatorToMove) || (premoveHere && !creatorToMove),\r\n          (ghostHere && !creatorToMove) || (premoveHere && creatorToMove),\r\n        ];\r\n        const cellType = cellTypeByPos(pos);\r\n\r\n        let color;\r\n        if (cellType === \"Ground\") {\r\n          if (hoveredCell && posEq(pos, hoveredCell))\r\n            color = displayParams.groundHoverColor;\r\n          else color = displayParams.groundColor;\r\n        } else if (cellType === \"Wall\") {\r\n          if (hoveredCell && posEq(pos, hoveredCell))\r\n            color = displayParams.emptyWallHoverColor;\r\n          else color = displayParams.emptyWallColor;\r\n        } else color = displayParams.pillarColor;\r\n        if (isDarkModeOn) color = invert(color);\r\n\r\n        let className = \"\";\r\n        //add waves cosmetic effect when clicking a cell\r\n        if (cellType === \"Ground\") className += \" waves-effect waves-light\";\r\n        if (cellType === \"Wall\") className += \" waves-effect waves-dark\";\r\n\r\n        const ghostOrPlayerHere =\r\n          p1Here || p2Here || p1GhostHere || p2GhostHere;\r\n        const anyIconHere = ghostOrPlayerHere || goal1Here || goal2Here;\r\n        const coordFits = groundSize > 27 && !anyIconHere;\r\n        const letterCoordHere =\r\n          coordFits && pos.r === dims.h - 1 && pos.c % 2 === 0;\r\n        const numberCoordHere =\r\n          coordFits && pos.c === dims.w - 1 && pos.r % 2 === 0;\r\n        const coordHere = letterCoordHere || numberCoordHere;\r\n        //special coloring for Ground cells containing the goals goals\r\n        if (goal1Here || goal2Here) {\r\n          className = goal1Here ? color1 : color2;\r\n          className += isDarkModeOn ? \" darken-4\" : \" lighten-4\";\r\n        }\r\n        //wall coloring for built walls (depending on builder)\r\n        if (cellType === \"Wall\") {\r\n          const solidWallHere = grid[pos.r][pos.c] !== 0;\r\n          if (solidWallHere || ghostHere || premoveHere) {\r\n            if (solidWallHere) {\r\n              className = grid[pos.r][pos.c] === 1 ? color1 : color2;\r\n              className += isDarkModeOn ? \"\" : \" darken-3\";\r\n            } else if (ghostHere) {\r\n              className = creatorToMove ? color1 : color2;\r\n              className += isDarkModeOn ? \" lighten-2\" : \" lighten-3\";\r\n            } else {\r\n              className = !creatorToMove ? color1 : color2;\r\n              className += isDarkModeOn ? \" lighten-2\" : \" lighten-3\";\r\n            }\r\n          }\r\n        }\r\n\r\n        let justifyContent = \"center\";\r\n        if (coordHere) justifyContent = letterCoordHere ? \"start\" : \"flex-end\";\r\n        let alignItems = \"center\";\r\n        if (coordHere) alignItems = letterCoordHere ? \"flex-end\" : \"flex-start\";\r\n\r\n        return (\r\n          <div\r\n            className={className}\r\n            key={`cell_${pos.r}_${pos.c}`}\r\n            onClick={() => {\r\n              if (cellType !== \"Pillar\" && handleClick !== null)\r\n                handleClick(pos);\r\n            }}\r\n            onMouseEnter={() => handleMouseEnter(pos)}\r\n            onMouseLeave={handleMouseLeave}\r\n            style={{\r\n              backgroundColor: color,\r\n              display: \"flex\",\r\n              justifyContent: justifyContent,\r\n              alignItems: alignItems,\r\n              cursor: \"pointer\",\r\n              borderTop: pos.r === 0 ? displayParams.borderStyle : \"\",\r\n              borderBottom:\r\n                pos.r === dims.h - 1 ? displayParams.borderStyle : \"\",\r\n              borderLeft: pos.c === 0 ? displayParams.borderStyle : \"\",\r\n              borderRight:\r\n                pos.c === dims.w - 1 ? displayParams.borderStyle : \"\",\r\n            }}\r\n          >\r\n            {p1Here && (\r\n              <i\r\n                className={`material-icons ${color1}-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {p2Here && (\r\n              <i\r\n                className={`material-icons ${color2}-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n            {goal1Here && !ghostOrPlayerHere && (\r\n              <i\r\n                className={`material-icons white-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {goal2Here && !ghostOrPlayerHere && (\r\n              <i\r\n                className={`material-icons white-text`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n            {p1GhostHere && cellType === \"Ground\" && (\r\n              <i\r\n                className={`material-icons ${color1}-text text-lighten-4`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon1}\r\n              </i>\r\n            )}\r\n            {p2GhostHere && cellType === \"Ground\" && (\r\n              <i\r\n                className={`material-icons ${color2}-text text-lighten-4`}\r\n                style={{ fontSize: `${iconSize}px` }}\r\n              >\r\n                {icon2}\r\n              </i>\r\n            )}\r\n            {letterCoordHere && (\r\n              <div\r\n                style={{ color: coordColor, padding: \"0\", marginLeft: \"4px\" }}\r\n              >\r\n                {String.fromCharCode(97 + pos.c / 2)}\r\n              </div>\r\n            )}\r\n            {numberCoordHere && (\r\n              <div\r\n                style={{ color: coordColor, padding: \"0\", marginRight: \"4px\" }}\r\n              >\r\n                {\"\" + (1 + pos.r / 2)}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { Button, Icon, Modal } from \"react-materialize\";\r\n\r\nconst IconButton = ({\r\n  icon,\r\n  tooltip,\r\n  onClick,\r\n  modalTitle,\r\n  modalBody,\r\n  modalConfirmButtonText,\r\n  bgColor,\r\n  padding,\r\n  disabled,\r\n}) => {\r\n  if (!modalBody) {\r\n    return (\r\n      <Button\r\n        className={bgColor ? bgColor : \"teal\"}\r\n        node=\"button\"\r\n        waves=\"light\"\r\n        icon={<Icon className=\"large\">{icon}</Icon>}\r\n        onClick={onClick}\r\n        tooltip={tooltip}\r\n        disabled={disabled}\r\n      />\r\n    );\r\n  }\r\n\r\n  let actions;\r\n  if (modalConfirmButtonText && modalConfirmButtonText !== \"\") {\r\n    actions = [\r\n      <Button\r\n        style={{\r\n          backgroundColor: \"#009688\",\r\n          color: \"white\",\r\n          marginRight: \"1rem\",\r\n        }}\r\n        flat\r\n        modal=\"close\"\r\n        node=\"button\"\r\n        waves=\"green\"\r\n        onClick={onClick}\r\n      >\r\n        {modalConfirmButtonText}\r\n      </Button>,\r\n      <Button\r\n        style={{\r\n          backgroundColor: \"#009688\",\r\n          color: \"white\",\r\n        }}\r\n        flat\r\n        modal=\"close\"\r\n        node=\"button\"\r\n        waves=\"green\"\r\n      >\r\n        Cancel\r\n      </Button>,\r\n    ];\r\n  } else {\r\n    actions = (\r\n      <Button\r\n        style={{\r\n          backgroundColor: \"#009688\",\r\n          color: \"white\",\r\n        }}\r\n        flat\r\n        modal=\"close\"\r\n        node=\"button\"\r\n        waves=\"green\"\r\n      >\r\n        Close\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  const trigger = (\r\n    <Button\r\n      style={{ padding: `0px ${padding}px` }}\r\n      className={bgColor ? bgColor : \"teal\"}\r\n      node=\"button\"\r\n      waves=\"light\"\r\n      icon={<Icon className=\"large\">{icon}</Icon>}\r\n      tooltip={tooltip}\r\n      disabled={disabled}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      style={{ color: \"black\", backgroundColor: \"white\" }}\r\n      bottomSheet={false}\r\n      fixedFooter={false}\r\n      header={modalTitle}\r\n      open={false}\r\n      options={{\r\n        dismissible: true,\r\n        endingTop: \"10%\",\r\n        inDuration: 250,\r\n        opacity: 0.4,\r\n        outDuration: 250,\r\n        preventScrolling: true,\r\n        startingTop: \"4%\",\r\n      }}\r\n      trigger={trigger}\r\n      actions={actions}\r\n    >\r\n      {<div>{modalBody}</div>}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\nimport \"materialize-css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport IconButton from \"./IconButton\";\r\nimport showToastNotification from \"./showToastNotification\";\r\n\r\nfunction Header({\r\n  gameName,\r\n  helpText,\r\n  isLargeScreen,\r\n  isDarkModeOn,\r\n  handleToggleDarkMode,\r\n}) {\r\n  let brand;\r\n  if (!gameName) {\r\n    brand = <span>WallWars</span>;\r\n  } else {\r\n    brand = (\r\n      <span>\r\n        {isLargeScreen && <span>WallWars&nbsp;&nbsp;</span>}\r\n        <CopyToClipboard\r\n          style={{ cursor: \"pointer\" }}\r\n          text={gameName}\r\n          onCopy={() => showToastNotification(\"Join code copied to clipboard!\")}\r\n        >\r\n          <span>Game {gameName}</span>\r\n        </CopyToClipboard>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  const aboutText = (\r\n    <div>\r\n      <h6>\r\n        Wallwars is an online 2-player strategy game. The goal is to get to your\r\n        goal before the opponent gets to hers, building walls to reshape the\r\n        terrain to your advantage.\r\n      </h6>\r\n      <h6>\r\n        It is implemented by Nil M and inspired by a board game he played once\r\n        as a kid, of which he doesn't remember the name, unfortunately.\r\n      </h6>\r\n      <h6>\r\n        The frontend is made with React, and the backend with Node.js, Express,\r\n        and socket.io.\r\n      </h6>\r\n      <h6>\r\n        The source code is available at https://github.com/nmamano/WallWars\r\n      </h6>\r\n    </div>\r\n  );\r\n\r\n  const color = isDarkModeOn ? \"red darken-4\" : \"red lighten-1\";\r\n  const padding = isLargeScreen ? 20 : 11;\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={color}\r\n        style={{\r\n          height: \"50px\",\r\n          display: \"grid\",\r\n          gridTemplateRows: \"1fr\",\r\n          gridTemplateColumns: \"auto auto\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            fontSize: isLargeScreen ? \"30px\" : \"25px\",\r\n            marginLeft: isLargeScreen ? \"15px\" : \"5px\",\r\n          }}\r\n        >\r\n          {brand}\r\n        </div>\r\n        <div\r\n          style={{\r\n            height: \"auto\",\r\n            display: \"grid\",\r\n            padding: \"5px\",\r\n            gridTemplateColumns: \"repeat(3, 1fr)\",\r\n            gridTemplateRows: `auto`,\r\n            columnGap: \"5px\",\r\n            rowGap: \"5px\",\r\n            marginRight: isLargeScreen ? \"15px\" : \"5px\",\r\n          }}\r\n        >\r\n          <IconButton\r\n            icon={isDarkModeOn ? \"brightness_2\" : \"brightness_4\"}\r\n            tooltip={isDarkModeOn ? \"Turn off dark mode\" : \"Turn on dark mode\"}\r\n            onClick={handleToggleDarkMode}\r\n            bgColor=\"red darken-1\"\r\n            padding={padding}\r\n          />\r\n          <IconButton\r\n            icon=\"help\"\r\n            tooltip=\"Help\"\r\n            modalTitle=\"Help\"\r\n            modalBody={helpText}\r\n            bgColor=\"red darken-1\"\r\n            padding={padding}\r\n          />\r\n          <IconButton\r\n            icon=\"info\"\r\n            tooltip=\"About\"\r\n            modalTitle=\"About\"\r\n            modalBody={aboutText}\r\n            bgColor=\"red darken-1\"\r\n            padding={padding}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"react-materialize\";\r\n\r\nconst Dialog = ({\r\n  title,\r\n  body,\r\n  acceptButtonText, //defaults to Accept\r\n  rejectButtonText, //defaults to Cancel\r\n  isOpen,\r\n  callback, //callback function will receive true or false\r\n}) => {\r\n  return (\r\n    <Modal\r\n      style={{ color: \"black\", backgroundColor: \"white\" }}\r\n      header={title}\r\n      open={isOpen}\r\n      options={{\r\n        dismissible: false,\r\n        endingTop: \"10%\",\r\n        inDuration: 250,\r\n        opacity: 0.4,\r\n        outDuration: 250,\r\n        preventScrolling: true,\r\n        startingTop: \"4%\",\r\n      }}\r\n      actions={[\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"#009688\",\r\n            color: \"white\",\r\n            marginRight: \"1rem\",\r\n          }}\r\n          flat\r\n          modal=\"close\"\r\n          node=\"button\"\r\n          waves=\"green\"\r\n          onClick={() => {\r\n            callback(true);\r\n          }}\r\n        >\r\n          {acceptButtonText || \"Accept\"}\r\n        </Button>,\r\n        <Button\r\n          style={{\r\n            backgroundColor: \"#009688\",\r\n            color: \"white\",\r\n          }}\r\n          flat\r\n          modal=\"close\"\r\n          node=\"button\"\r\n          waves=\"green\"\r\n          onClick={() => {\r\n            callback(false);\r\n          }}\r\n        >\r\n          {rejectButtonText || \"Cancel\"}\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {<div>{body}</div>}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","import React from \"react\";\r\n\r\nconst StatusHeader = ({\r\n  names,\r\n  lifeCycleStage,\r\n  winner,\r\n  finishReason,\r\n  indexToMove,\r\n  timeControl,\r\n  creatorStarts,\r\n  isLargeScreen,\r\n}) => {\r\n  let msg;\r\n  const nameToMove = names[indexToMove];\r\n  const finishMessage = {\r\n    time: \"on time\",\r\n    goal: \"by reaching the goal\",\r\n    resign: \"by resignation\",\r\n    disconnect: \"by disconnection\",\r\n  };\r\n  const drawFinishMessage = {\r\n    goal: \"by the 1-move rule\",\r\n    agreement: \"by agreement\",\r\n  };\r\n  switch (lifeCycleStage) {\r\n    case -2:\r\n      msg = \"Haven't tried to connect to the server yet\";\r\n      break;\r\n    case -1:\r\n      msg = \"Waking the server up...\";\r\n      break;\r\n    case 0:\r\n      msg = \"Waiting for player 2 to join\";\r\n      break;\r\n    case 1:\r\n      msg = `${nameToMove} starts`;\r\n      break;\r\n    case 2:\r\n    case 3:\r\n      msg = `${nameToMove} to move`;\r\n      break;\r\n    case 4:\r\n      if (winner === \"draw\")\r\n        msg = \"The game ended in a draw \" + drawFinishMessage[finishReason];\r\n      else\r\n        msg = `${names[winner === \"creator\" ? 0 : 1]} won ${\r\n          finishMessage[finishReason]\r\n        }`;\r\n      break;\r\n    default:\r\n      console.error(\"stage should be in range [-2..4]\");\r\n  }\r\n\r\n  const roundNum = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\r\n\r\n  return (\r\n    <div\r\n      className={\"teal darken-2\"}\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"auto\",\r\n        gridTemplateRows: \"1fr 1fr 1fr\",\r\n        alignItems: \"center\",\r\n        padding: isLargeScreen ? \"15px 15px\" : \"5px 15px\",\r\n        gridArea: \"status\",\r\n      }}\r\n    >\r\n      <div>\r\n        <p>{msg}</p>\r\n      </div>\r\n      <div>\r\n        {timeControl && (\r\n          <p>\r\n            Time control: {roundNum(timeControl.duration)}+\r\n            {roundNum(timeControl.increment)}\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <p>\r\n          {\"First move:\" +\r\n            (lifeCycleStage > 1 ? ` ${names[creatorStarts ? 0 : 1]}` : \"\")}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusHeader;\r\n","import React from \"react\";\r\n\r\nconst TimerHeader = ({\r\n  lifeCycleStage,\r\n  names,\r\n  playerColors,\r\n  timeLeft,\r\n  indexToMove,\r\n  isLargeScreen,\r\n  scores,\r\n}) => {\r\n  const [min1, min2] = [\r\n    Math.floor(timeLeft[0] / 60),\r\n    Math.floor(timeLeft[1] / 60),\r\n  ];\r\n  const [sec1, sec2] = [timeLeft[0] % 60, timeLeft[1] % 60];\r\n  const timesAsStrings = [\r\n    `${min1}:${sec1 < 10 ? \"0\" : \"\"}${sec1}`,\r\n    `${min2}:${sec2 < 10 ? \"0\" : \"\"}${sec2}`,\r\n  ];\r\n  if (lifeCycleStage < 0) {\r\n    timesAsStrings[0] = \"_:__\";\r\n    timesAsStrings[1] = \"_:__\";\r\n  }\r\n  const highlightNameToMove = [\"\", \"\"];\r\n  if (lifeCycleStage < 4) {\r\n    //only if the game has not ended yet\r\n    const turnHighlight = \" lighten-1 z-depth-2\";\r\n    highlightNameToMove[indexToMove] =\r\n      playerColors[indexToMove] + turnHighlight;\r\n  }\r\n\r\n  const highlightLowTime = [\"\", \"\"];\r\n  const lowTime = 15;\r\n  const lowTimeColor = \" orange lighten-2 z-depth-2\";\r\n  if (lifeCycleStage === 3) {\r\n    if (indexToMove === 0) {\r\n      if (timeLeft[0] < lowTime) highlightLowTime[0] = lowTimeColor;\r\n    } else if (indexToMove === 1) {\r\n      if (timeLeft[1] < lowTime) highlightLowTime[1] = lowTimeColor;\r\n    }\r\n  }\r\n\r\n  const showScores = scores[0] !== 0 || scores[1] !== 0;\r\n  let sep;\r\n  if (isLargeScreen && !showScores) sep = \"15px\";\r\n  else if (isLargeScreen && showScores) sep = \"12px\";\r\n  else if (!isLargeScreen && !showScores) sep = \"8px\";\r\n  else sep = \"6px\";\r\n  const childStyle = {\r\n    padding: sep,\r\n    fontSize: isLargeScreen ? \"18px\" : \"14px\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\"teal darken-2\"}\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: showScores\r\n          ? \"0.5fr 1.7fr 1fr 1fr 1.7fr 0.5fr\"\r\n          : \"1.7fr 1fr 1fr 1.7fr\",\r\n        gridTemplateRows: \"auto\",\r\n        alignContent: \"center\",\r\n        columnGap: sep,\r\n        padding: sep,\r\n        gridArea: \"timer\",\r\n      }}\r\n    >\r\n      {showScores && (\r\n        <div style={childStyle} className={\"center\"}>\r\n          {scores[0]}\r\n        </div>\r\n      )}\r\n      <div\r\n        style={childStyle}\r\n        className={highlightNameToMove[0] + \" center truncate\"}\r\n      >\r\n        {names[0]}\r\n      </div>\r\n      <div style={childStyle} className={highlightLowTime[0] + \" center\"}>\r\n        {timesAsStrings[0]}\r\n      </div>\r\n      <div style={childStyle} className={highlightLowTime[1] + \" center\"}>\r\n        {timesAsStrings[1]}\r\n      </div>\r\n      <div\r\n        style={childStyle}\r\n        className={highlightNameToMove[1] + \" center truncate\"}\r\n      >\r\n        {names[1] === null ? \"______\" : names[1]}\r\n      </div>\r\n      {showScores && (\r\n        <div style={childStyle} className={\"center\"}>\r\n          {scores[1]}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimerHeader;\r\n","import React from \"react\";\r\n\r\nconst GameHelp = () => (\r\n  <div>\r\n    <h6>\r\n      To connect with your friend, share the game code in the top header with\r\n      them and tell them to use it when clicking \"Join Game\" from the lobby.\r\n      Click on the code to copy it to the clipboard.\r\n    </h6>\r\n    <h6>Rules of the game:</h6>\r\n    <h6>\r\n      The player who created the game starts at the top left corner (color red).\r\n      The player who joined the game starts at the top right (color blue). The\r\n      goal of each player is to reach the <em>opposite</em> corner from where\r\n      they start. The player who gets there first, wins.\r\n    </h6>\r\n    <h6>\r\n      Players move by clicking cells on the board. There are two types of cells:\r\n      ground cells (the big squares) and walls (the thin rectangles in between\r\n      ground cells). Each move consists of a total of two actions. One action\r\n      can be building one wall or moving to an adjacent cell (a diagonal move\r\n      counts as two actions).\r\n    </h6>\r\n    <h6>\r\n      Players can build walls to obstruct the opponent. Walls can be built\r\n      anywhere as long as there always exists at least one way to get to their\r\n      goal.\r\n    </h6>\r\n    <h6>\r\n      The remaining time for each player is shown next to their name. The clock\r\n      of a player ticks down when it is their turn (after each player has moved\r\n      once). The player who starts is chosen randomly. The name of the player to\r\n      move next is highlighted with their color.\r\n    </h6>\r\n    <h6>\r\n      If it is your turn and you do a single action, like building a wall or\r\n      moving to an adjacent cell, you can undo it by clicking the wall again or\r\n      clicking a different ground cell, respectively. Once you choose 2 actions,\r\n      the move becomes permanent.\r\n    </h6>\r\n    <h6>Special rules:</h6>\r\n    <h6>(1) no walls can be placed during the first move of each player.</h6>\r\n    <h6>\r\n      (2) if the player who moved first reaches the goal first but the other\r\n      player is at distance 1 or 2 from her goal, the game ends in a draw.\r\n    </h6>\r\n    <h6>\r\n      Note: if you return to the lobby, you will not be able to reenter this\r\n      game!\r\n    </h6>\r\n  </div>\r\n);\r\n\r\nexport default GameHelp;\r\n","import React from \"react\";\r\nimport { Table } from \"react-materialize\";\r\n\r\nimport { cellTypeByPos } from \"../gameLogic/mainLogic\";\r\n\r\nconst moveToString = (move) => {\r\n  if (move.index === 0) return \"__\";\r\n  let wallCount = 0;\r\n  for (let k = 0; k < move.actions.length; k++) {\r\n    const aPos = move.actions[k];\r\n    const aType = cellTypeByPos(aPos);\r\n    if (aType === \"Wall\") wallCount += 1;\r\n  }\r\n  if (wallCount === 0) return \"GG\";\r\n  else if (wallCount === 1) return \"GW\";\r\n  return \"WW\";\r\n};\r\n\r\nconst thClassName = \"teal darken-2\";\r\nconst thStyle = {\r\n  position: \"sticky\",\r\n  top: \"0px\",\r\n  paddingTop: \"0.15rem\",\r\n  paddingBottom: \"0.15rem\",\r\n  borderRadius: \"0\",\r\n};\r\nconst tdStyle = {\r\n  paddingTop: \"0.15rem\",\r\n  paddingBottom: \"0.15rem\",\r\n  borderRadius: \"0\",\r\n};\r\n\r\nconst MoveHistory = ({\r\n  moveHistory,\r\n  playerColors,\r\n  creatorStarts,\r\n  handleViewMove,\r\n  viewIndex,\r\n  height,\r\n}) => {\r\n  return (\r\n    <div\r\n      id={\"movehistory\"}\r\n      className={\"center\"}\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        display: \"block\",\r\n        height: height,\r\n        MozUserSelect: \"none\",\r\n        webkitUserSelect: \"none\",\r\n        msUserSelect: \"none\",\r\n        userSelect: \"none\",\r\n      }}\r\n    >\r\n      <Table centered style={{ width: \"100%\" }}>\r\n        <thead>\r\n          <tr>\r\n            <th className={thClassName} style={thStyle}>\r\n              Move\r\n            </th>\r\n            <th className={thClassName} style={thStyle}>\r\n              Actions\r\n            </th>\r\n            <th className={thClassName} style={thStyle}>\r\n              Distance\r\n            </th>\r\n            <th className={thClassName} style={thStyle}>\r\n              # Walls\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {moveHistory.map((move, i) => {\r\n            let color;\r\n            if (i === 0) color = undefined;\r\n            else {\r\n              if (creatorStarts) color = playerColors[(i + 1) % 2];\r\n              else color = playerColors[i % 2];\r\n              color += \" lighten-2\";\r\n            }\r\n            if (viewIndex === i && i < moveHistory.length - 1)\r\n              color = \"amber darken-1\";\r\n            return (\r\n              <tr\r\n                onClick={() => handleViewMove(i)}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                }}\r\n                key={i}\r\n                className={color}\r\n              >\r\n                <td style={tdStyle}>{i}</td>\r\n                <td style={tdStyle}>{moveToString(move)}</td>\r\n                <td style={tdStyle}>\r\n                  {move.distances[0] + \" - \" + move.distances[1]}\r\n                </td>\r\n                <td style={tdStyle}>\r\n                  {move.wallCounts[0] + \" - \" + move.wallCounts[1]}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoveHistory;\r\n","import React from \"react\";\r\nimport MoveHistory from \"./MoveHistory\";\r\nimport IconButton from \"./../shared/IconButton\";\r\nimport showToastNotification from \"../shared/showToastNotification\";\r\n\r\nconst GameControlPanel = ({\r\n  lifeCycleStage,\r\n  handleResign,\r\n  handleOfferDraw,\r\n  handleRequestTakeback,\r\n  handleGiveExtraTime,\r\n  moveHistory,\r\n  playerColors,\r\n  clientRole,\r\n  creatorStarts,\r\n  handleViewMove,\r\n  viewIndex,\r\n  turnCount,\r\n  handleSeeFirstMove,\r\n  handleSeePreviousMove,\r\n  handleSeeNextMove,\r\n  handleSeeLastMove,\r\n  handleToggleVolume,\r\n  isVolumeOn,\r\n  handleLeaveGame,\r\n  handleIncreaseBoardSize,\r\n  handleDecreaseBoardSize,\r\n  zoomLevel,\r\n  boardHeight,\r\n}) => {\r\n  const padding = 5;\r\n  const gapHeight = 5;\r\n  const buttonHeight = 36;\r\n  const moveHistoryHeight =\r\n    boardHeight - buttonHeight * 3 - gapHeight * 3 - padding * 2;\r\n\r\n  const takebackEnabled =\r\n    lifeCycleStage === 3 ||\r\n    (lifeCycleStage === 2 && creatorStarts === (clientRole === \"Creator\"));\r\n\r\n  //all game functions are disabled for spectator\r\n  const isSpectator = clientRole === \"Spectator\";\r\n\r\n  return (\r\n    <div\r\n      className=\"teal darken-2\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n        display: \"grid\",\r\n        padding: `${padding}px`,\r\n        gridTemplateColumns: \"repeat(4, 1fr)\",\r\n        gridTemplateRows: `${buttonHeight}px 1fr ${buttonHeight}px ${buttonHeight}px`,\r\n        columnGap: `${gapHeight}px`,\r\n        rowGap: `${gapHeight}px`,\r\n        gridArea: \"panel\",\r\n      }}\r\n    >\r\n      <IconButton\r\n        icon={\"flag\"}\r\n        tooltip={\"Resign\"}\r\n        modalTitle={\"Resign\"}\r\n        modalBody={\"Are you sure you want to resign?\"}\r\n        modalConfirmButtonText={\"Resign\"}\r\n        onClick={handleResign}\r\n        disabled={isSpectator || lifeCycleStage !== 3}\r\n      />\r\n      <IconButton\r\n        icon={\"local_florist\"}\r\n        tooltip={\"Offer Draw\"}\r\n        modalTitle={\"Offer Draw\"}\r\n        modalBody={\"Are you sure you want to offer a draw?\"}\r\n        modalConfirmButtonText={\"Offer draw\"}\r\n        onClick={handleOfferDraw}\r\n        disabled={isSpectator || lifeCycleStage !== 3}\r\n      />\r\n      <IconButton\r\n        icon={\"replay\"}\r\n        tooltip={\"Request takeback\"}\r\n        onClick={() => {\r\n          showToastNotification(\r\n            \"A takeback request was sent to the opponent.\",\r\n            5000\r\n          );\r\n          handleRequestTakeback();\r\n        }}\r\n        disabled={isSpectator || !takebackEnabled}\r\n      />\r\n      <IconButton\r\n        icon={\"add_alarm\"}\r\n        tooltip={\"Give 60 seconds\"}\r\n        onClick={() => {\r\n          showToastNotification(\"You added 60s to the opponent's clock.\", 5000);\r\n          handleGiveExtraTime();\r\n        }}\r\n        disabled={isSpectator || lifeCycleStage !== 3}\r\n      />\r\n      <div style={{ gridColumnStart: \"1\", gridColumnEnd: \"5\" }}>\r\n        <MoveHistory\r\n          moveHistory={moveHistory}\r\n          playerColors={playerColors}\r\n          creatorStarts={creatorStarts}\r\n          handleViewMove={handleViewMove}\r\n          viewIndex={viewIndex}\r\n          height={moveHistoryHeight}\r\n        />\r\n      </div>\r\n      <IconButton\r\n        icon={\"fast_rewind\"}\r\n        onClick={handleSeeFirstMove}\r\n        disabled={lifeCycleStage <= 1 || viewIndex === 0}\r\n      />\r\n      <IconButton\r\n        icon={\"navigate_before\"}\r\n        onClick={handleSeePreviousMove}\r\n        disabled={lifeCycleStage <= 1 || viewIndex === 0}\r\n      />\r\n      <IconButton\r\n        icon={\"navigate_next\"}\r\n        onClick={handleSeeNextMove}\r\n        disabled={lifeCycleStage <= 1 || viewIndex === turnCount}\r\n      />\r\n      <IconButton\r\n        icon={\"fast_forward\"}\r\n        onClick={handleSeeLastMove}\r\n        disabled={lifeCycleStage <= 1 || viewIndex === turnCount}\r\n      />\r\n      <IconButton\r\n        icon={isVolumeOn ? \"volume_up\" : \"volume_off\"}\r\n        tooltip={\r\n          isVolumeOn ? \"Turn off sound effects\" : \"Turn on sound effects\"\r\n        }\r\n        onClick={handleToggleVolume}\r\n        disabled={isSpectator}\r\n      />\r\n      <IconButton\r\n        icon={\"zoom_out\"}\r\n        tooltip={\"Decrease board size\"}\r\n        onClick={handleDecreaseBoardSize}\r\n        disabled={zoomLevel === 0}\r\n      />\r\n      <IconButton\r\n        icon={\"zoom_in\"}\r\n        tooltip={\"Increase board size\"}\r\n        onClick={handleIncreaseBoardSize}\r\n        disabled={zoomLevel === 10}\r\n      />\r\n      <IconButton\r\n        icon=\"home\"\r\n        tooltip=\"Quit game\"\r\n        onClick={handleLeaveGame}\r\n        modalTitle=\"Return to lobby\"\r\n        modalBody=\"Are you sure you want to return to the lobby?\"\r\n        modalConfirmButtonText=\"Quit game\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameControlPanel;\r\n","import React, { useEffect } from \"react\";\r\nimport { Button, Row, Col } from \"react-materialize\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\nimport { useImmer } from \"use-immer\";\r\nimport UIfx from \"uifx\";\r\nimport moveSoundAudio from \"./../static/moveSound.mp3\";\r\nimport showToastNotification from \"../shared/showToastNotification\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nimport globalSettings from \"../shared/globalSettings\";\r\nimport {\r\n  cellTypeByPos,\r\n  posEq,\r\n  emptyGrid,\r\n  distance,\r\n  isDistanceAtMost,\r\n  canBuildWall,\r\n} from \"../gameLogic/mainLogic\";\r\nimport Board from \"./Board\";\r\nimport Header from \"../shared/Header\";\r\nimport Dialog from \"../shared/Dialog\";\r\nimport StatusHeader from \"./StatusHeader\";\r\nimport TimerHeader from \"./TimerHeader\";\r\nimport GameHelp from \"./GameHelp\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n//===================================================\r\n//settings that never change, so they don't need to be inside the component\r\n//===================================================\r\nconst moveSound = new UIfx(moveSoundAudio);\r\nconst playMoveSound = () => {\r\n  moveSound.play();\r\n};\r\nconst goals = globalSettings.goals;\r\nconst boardDims = globalSettings.boardDims;\r\nconst initialPlayerPos = globalSettings.initialPlayerPos;\r\n//===================================================\r\n//pure utility functions\r\n//===================================================\r\nconst turnCount = (state) => state.moveHistory.length - 1;\r\n\r\nconst creatorToMove = (state) =>\r\n  turnCount(state) % 2 === (state.creatorStarts ? 0 : 1);\r\n\r\nconst indexToMove = (state) => (creatorToMove(state) ? 0 : 1);\r\n\r\n//one of 'None', 'Ground', 'Wall'\r\nconst ghostType = (pos) => (pos === null ? \"None\" : cellTypeByPos(pos));\r\n\r\n//when the player selects a cell, it can trigger a different\r\n//number of actions (1 action: build 1 wall or move 1 step)\r\n//this function counts the number of actions for a selected position\r\nconst countActions = (\r\n  grid,\r\n  selectedPos,\r\n  posActor,\r\n  posOther,\r\n  goalActor,\r\n  goalOther,\r\n  extraWalls\r\n) => {\r\n  const gridCopy = cloneDeep(grid);\r\n  for (let k = 0; k < extraWalls.length; k++) {\r\n    const W = extraWalls[k];\r\n    gridCopy[W.r][W.c] = 1;\r\n  }\r\n  if (cellTypeByPos(selectedPos) === \"Ground\") {\r\n    return distance(gridCopy, posActor, selectedPos);\r\n  }\r\n  return canBuildWall(\r\n    gridCopy,\r\n    [posActor, posOther],\r\n    [goalActor, goalOther],\r\n    selectedPos\r\n  )\r\n    ? 1\r\n    : 0;\r\n};\r\n\r\n//===================================================\r\n//functions that modify a copy of the state\r\n//===================================================\r\n//the state itself should be immutable, but we can make changes\r\n//to the copy 'draftState'\r\n\r\nconst createInitialState = (cookies) => {\r\n  const draftState = {\r\n    //===================================================\r\n    //state about the session (sequence of games played by rematching)\r\n    //===================================================\r\n    //game code used by the joiner to join the game\r\n    joinCode: null,\r\n    //json object with duration in minutes and increment in seconds\r\n    timeControl: null,\r\n    names: [null, null],\r\n    //how many games each player has won in this session\r\n    gameWins: [0, 0],\r\n    opponentLeft: false,\r\n\r\n    //===================================================\r\n    //shared state of the current game\r\n    //===================================================\r\n    creatorStarts: null, //who starts is decided by the server\r\n    winner: \"\", //'' if game is ongoing, else 'creator', 'joiner', or 'draw'\r\n    //'' if game is ongoing, 'goal' or agreement' if drawn,\r\n    //'time', 'goal', 'resign', or 'disconnect' if someone won\r\n    finishReason: \"\",\r\n\r\n    //life cycle of the game\r\n    //-2. Before sending 'createGame'/'joinGame' (for creator/joiner) to the server\r\n    //-1. Before receiving 'gameCreated'/'gameJoined' (for creator/joiner) from the server\r\n    //0. game created on server, but joiner not joined yet (only creator goes into this stage).\r\n    //1. joiner joined, but no moves made yet. Clocks not ticking.\r\n    //2. One player moved. Clocks still not ticking.\r\n    //3. Both players made at least 1 move and game has not ended. Clocks are ticking.\r\n    //4. Game ended because a win/draw condition is reached.\r\n    lifeCycleStage: -2,\r\n\r\n    moveHistory: [\r\n      {\r\n        index: 0,\r\n        actions: [],\r\n        //grid contains the locations of all the built walls, labeled by who built them\r\n        //0: empty wall, 1: player built by creator, 2: player built by joiner\r\n        grid: emptyGrid(boardDims),\r\n        playerPos: initialPlayerPos,\r\n        timeLeft: [null, null],\r\n        distances: [\r\n          distance(emptyGrid(boardDims), initialPlayerPos[0], goals[0]),\r\n          distance(emptyGrid(boardDims), initialPlayerPos[1], goals[1]),\r\n        ],\r\n        wallCounts: [0, 0],\r\n      },\r\n    ],\r\n\r\n    //===================================================\r\n    //state unique to this client\r\n    //===================================================\r\n    moveToSend: null, //moves to be sent to the other client are stored here temporarily\r\n\r\n    //the ghost action is a single action done and shown only to this client\r\n    //when it is this client's turn to move. it can be combined with another\r\n    //action to make a full move, or undone in order to choose a different action\r\n    ghostAction: null,\r\n\r\n    //premove actions are one or two actions done by this client when it is not\r\n    //this client's turn to move. once the opponent moves, the game behaves as if\r\n    //the client inputted the premove actions during their turn\r\n    premoveActions: [],\r\n\r\n    isVolumeOn: false,\r\n    showBackButtonWarning: false,\r\n    isKeyPressed: false,\r\n    //index of the move that the client is looking at, which may not be the last one\r\n    viewIndex: 0,\r\n    zoomLevel: 5, //number from 0 to 10\r\n    //various dialogs where the player needs to make a decision\r\n    showDrawDialog: false,\r\n    showTakebackDialog: false,\r\n    showRematchDialog: false,\r\n  };\r\n  applyCookieSettings(draftState, cookies);\r\n  return draftState;\r\n};\r\n\r\nconst applyCookieSettings = (draftState, cookies) => {\r\n  if (!cookies) return;\r\n  if (cookies.isVolumeOn && cookies.isVolumeOn === \"true\")\r\n    draftState.isVolumeOn = true;\r\n  if (cookies.zoomLevel) {\r\n    const zoomVal = parseInt(cookies.zoomLevel);\r\n    if (zoomVal >= 0 && zoomVal <= 10) draftState.zoomLevel = zoomVal;\r\n  }\r\n};\r\n\r\nconst applyAddCreator = (draftState, timeControl, creatorName) => {\r\n  draftState.lifeCycleStage = -1;\r\n  draftState.timeControl = timeControl;\r\n  draftState.names[0] = creatorName;\r\n  const totalTimeInSeconds = timeControl.duration * 60;\r\n  draftState.moveHistory[0].timeLeft = [totalTimeInSeconds, totalTimeInSeconds];\r\n};\r\n\r\nconst applyAddJoiner = (draftState, joinCode, joinerName) => {\r\n  draftState.lifeCycleStage = -1;\r\n  draftState.joinCode = joinCode;\r\n  draftState.names[1] = joinerName;\r\n};\r\n\r\n//data sent by the server to the creator\r\nconst applyCreatedOnServer = (draftState, joinCode, creatorStarts) => {\r\n  //if life cycle stage is already 0, it means we already processed the response\r\n  if (draftState.lifeCycleStage === 0) return;\r\n  draftState.joinCode = joinCode;\r\n  draftState.creatorStarts = creatorStarts;\r\n  draftState.lifeCycleStage = 0;\r\n};\r\n\r\n//data sent by the server to the joiner\r\nconst applyJoinedOnServer = (\r\n  draftState,\r\n  creatorName,\r\n  timeControl,\r\n  creatorStarts\r\n) => {\r\n  //if life cycle stage is already 1, it means we already joined\r\n  if (draftState.lifeCycleStage === 1) return;\r\n  draftState.creatorStarts = creatorStarts;\r\n  draftState.names[0] = creatorName;\r\n  draftState.timeControl = timeControl;\r\n  const startSeconds = timeControl.duration * 60;\r\n  draftState.moveHistory[0].timeLeft = [startSeconds, startSeconds];\r\n  draftState.lifeCycleStage = 1;\r\n};\r\n\r\nconst applyJoinerJoined = (draftState, joinerName) => {\r\n  //if life cycle stage is already 1, it means the joiner already joined\r\n  if (draftState.lifeCycleStage === 1) return;\r\n  draftState.names[1] = joinerName;\r\n  draftState.lifeCycleStage = 1;\r\n};\r\n\r\nconst applyReceivedGame = (draftState, serverGame) => {\r\n  applyAddCreator(\r\n    draftState,\r\n    serverGame.timeControl,\r\n    serverGame.playerNames[0]\r\n  );\r\n  applyCreatedOnServer(\r\n    draftState,\r\n    serverGame.joinCode,\r\n    serverGame.creatorStarts\r\n  );\r\n  applyJoinerJoined(draftState, serverGame.playerNames[1]);\r\n  for (let k = 0; k < serverGame.moveHistory.length; k++) {\r\n    const actions = serverGame.moveHistory[k].actions;\r\n    const tLeft = serverGame.moveHistory[k].remainingTime;\r\n    applyMove(draftState, actions, tLeft, k + 1);\r\n  }\r\n  draftState.gameWins = serverGame.gameWins;\r\n  draftState.winner = serverGame.winner;\r\n  draftState.finishReason = serverGame.finishReason;\r\n  draftState.lifeCycleStage = 4;\r\n};\r\n\r\n//applies the move number 'moveIndex', consisting of the action(s) in 'actions',\r\n//'timeLeftAfterMove' is the time left by the player who made the move\r\nconst applyMove = (draftState, actions, timeLeftAfterMove, moveIndex) => {\r\n  //only in life cycle stages 1,2,3 players can make move\r\n  if (draftState.lifeCycleStage < 1 || draftState.lifeCycleStage > 3) return;\r\n  //make the move only if it is the next one (safety measure against desync issues)\r\n  const tc = turnCount(draftState);\r\n  if (tc !== moveIndex - 1) return;\r\n\r\n  const idxToMove = indexToMove(draftState);\r\n  const otherIdx = idxToMove === 0 ? 1 : 0;\r\n  const newPlayerPos = cloneDeep(draftState.moveHistory[tc].playerPos);\r\n  const newGrid = cloneDeep(draftState.moveHistory[tc].grid);\r\n  const newTimeLeft = cloneDeep(draftState.moveHistory[tc].timeLeft);\r\n  const wallCounts = cloneDeep(draftState.moveHistory[tc].wallCounts);\r\n  newTimeLeft[idxToMove] = timeLeftAfterMove;\r\n  for (let k = 0; k < actions.length; k++) {\r\n    const aPos = actions[k];\r\n    const aType = cellTypeByPos(aPos);\r\n    if (aType === \"Ground\") {\r\n      newPlayerPos[idxToMove] = aPos;\r\n      if (posEq(aPos, goals[idxToMove])) {\r\n        const pToMoveStarted = tc % 2 === 0;\r\n        const otherIsWithinOneMove = isDistanceAtMost(\r\n          newGrid,\r\n          newPlayerPos[otherIdx],\r\n          goals[otherIdx],\r\n          2\r\n        );\r\n        if (pToMoveStarted && otherIsWithinOneMove) {\r\n          draftState.winner = \"draw\";\r\n          draftState.gameWins[0] += 0.5;\r\n          draftState.gameWins[1] += 0.5;\r\n        } else {\r\n          draftState.winner = idxToMove === 0 ? \"creator\" : \"joiner\";\r\n          draftState.gameWins[idxToMove] += 1;\r\n        }\r\n        draftState.finishReason = \"goal\";\r\n        draftState.lifeCycleStage = 4;\r\n      }\r\n    } else if (aType === \"Wall\") {\r\n      newGrid[aPos.r][aPos.c] = idxToMove + 1;\r\n      wallCounts[idxToMove] += 1;\r\n    } else console.error(\"unexpected action type\", aType);\r\n  }\r\n  draftState.moveHistory.push({\r\n    index: tc + 1,\r\n    actions: actions,\r\n    grid: newGrid,\r\n    playerPos: newPlayerPos,\r\n    timeLeft: newTimeLeft,\r\n    distances: [\r\n      distance(newGrid, newPlayerPos[0], goals[0]),\r\n      distance(newGrid, newPlayerPos[1], goals[1]),\r\n    ],\r\n    wallCounts: wallCounts,\r\n  });\r\n\r\n  if (draftState.lifeCycleStage === 1 && tc === 0)\r\n    draftState.lifeCycleStage = 2;\r\n  else if (draftState.lifeCycleStage === 2 && tc === 1)\r\n    draftState.lifeCycleStage = 3;\r\n\r\n  //ghost actions are cleared when a move actually happens\r\n  draftState.ghostAction = null;\r\n\r\n  //if the player is looking at a previous move, when a move happens\r\n  //they are automatically switched to viewing the new move\r\n  draftState.viewIndex = tc + 1;\r\n\r\n  //apply premoves, if any\r\n  if (draftState.premoveActions.length > 0) {\r\n    const acts = draftState.premoveActions;\r\n    draftState.premoveActions = [];\r\n    for (let k = 0; k < acts.length; k++)\r\n      applySelectedCell(draftState, acts[k], true, false);\r\n  }\r\n};\r\n\r\n//manage the state change on click or keyboard press. this may\r\n//change the ghost action (which is only shown to this client), or\r\n//make a full move, in which case it is also sent to the other client\r\nconst applySelectedCell = (draftState, pos, clientToMove, shouldPlaySound) => {\r\n  if (!clientToMove) {\r\n    applySelectedCellPremove(draftState, pos);\r\n    return;\r\n  }\r\n  if (draftState.lifeCycleStage < 1) return; //cannot move til player 2 joins\r\n  if (draftState.lifeCycleStage > 3) return; //cannot move if game finished\r\n  //can only move if looking at current position\r\n  if (draftState.viewIndex !== turnCount(draftState)) return;\r\n  //out of bounds position, can happen when using the keyboard keys\r\n  if (pos.r < 0 || pos.r >= boardDims.h || pos.c < 0 || pos.c >= boardDims.w)\r\n    return;\r\n\r\n  const selectedType = cellTypeByPos(pos);\r\n  //there's a rule that the first move by each player must be a move\r\n  if (draftState.lifeCycleStage < 3 && selectedType === \"Wall\") return;\r\n\r\n  const idx = indexToMove(draftState);\r\n  const otherIdx = idx === 0 ? 1 : 0;\r\n  const gType = ghostType(draftState.ghostAction);\r\n  const extraWalls = gType === \"Wall\" ? [draftState.ghostAction] : [];\r\n  const tc = turnCount(draftState);\r\n  let curPos = draftState.moveHistory[tc].playerPos[idx];\r\n  if (selectedType === \"Wall\" && gType === \"Ground\")\r\n    curPos = draftState.ghostAction;\r\n  const actCount = countActions(\r\n    draftState.moveHistory[tc].grid,\r\n    pos,\r\n    curPos,\r\n    draftState.moveHistory[tc].playerPos[otherIdx],\r\n    goals[idx],\r\n    goals[otherIdx],\r\n    extraWalls\r\n  );\r\n  if (actCount > 2) return; //clicked a ground cell at distance >2\r\n\r\n  //variables to store the outcome of the click, if any.\r\n  //in the case analysis below, if we detect that the click does\r\n  //not trigger any change, we simply return\r\n  //see docs/moveLogic.md for the description of the case analysis\r\n  let [fullMoveActions, newGhostAction] = [null, null];\r\n  if (gType === \"None\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (actCount === 1) newGhostAction = pos;\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (actCount === 1) newGhostAction = pos;\r\n      else if (actCount === 2) fullMoveActions = [pos];\r\n      else return;\r\n    }\r\n  } else if (gType === \"Wall\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (posEq(draftState.ghostAction, pos)) newGhostAction = null;\r\n      else if (actCount === 1) fullMoveActions = [pos, draftState.ghostAction];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (actCount === 0) newGhostAction = null;\r\n      else if (actCount === 1) fullMoveActions = [pos, draftState.ghostAction];\r\n      else return;\r\n    }\r\n  } else if (gType === \"Ground\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (actCount === 1) fullMoveActions = [pos, draftState.ghostAction];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (actCount === 0) newGhostAction = null;\r\n      else if (actCount === 1) {\r\n        if (posEq(pos, draftState.ghostAction)) newGhostAction = null;\r\n        else newGhostAction = pos;\r\n      } else if (actCount === 2) fullMoveActions = [pos];\r\n      else return;\r\n    }\r\n  } else {\r\n    console.error(\"unexpected ghost type\", gType);\r\n  }\r\n\r\n  if (fullMoveActions) {\r\n    const idx = indexToMove(draftState);\r\n    const tc = turnCount(draftState);\r\n    let tLeft = draftState.moveHistory[tc].timeLeft[idx];\r\n    //we don't add the increment until the clocks start running (stage 3)\r\n    if (draftState.lifeCycleStage === 3)\r\n      tLeft += draftState.timeControl.increment;\r\n    draftState.moveToSend = { actions: fullMoveActions, remainingTime: tLeft };\r\n    if (shouldPlaySound && draftState.isVolumeOn) playMoveSound();\r\n    applyMove(draftState, fullMoveActions, tLeft, turnCount(draftState) + 1);\r\n  } else {\r\n    draftState.ghostAction = newGhostAction;\r\n  }\r\n};\r\n\r\n//manage the state change on click or keyboard press.\r\n//dual function of applySelectedCell for when it's not your turn\r\nconst applySelectedCellPremove = (draftState, pos) => {\r\n  if (draftState.lifeCycleStage > 3) return; //cannot premove if game finished\r\n  //can only premove if looking at current position\r\n  if (draftState.viewIndex !== turnCount(draftState)) return;\r\n  //out of bounds position, can happen when using the keyboard keys\r\n  if (pos.r < 0 || pos.r >= boardDims.h || pos.c < 0 || pos.c >= boardDims.w)\r\n    return;\r\n  const selectedType = cellTypeByPos(pos);\r\n  //there's a rule that the first move by each player must be a move\r\n  if (draftState.lifeCycleStage < 2 && selectedType === \"Wall\") return;\r\n\r\n  const idx = indexToMove(draftState) === 0 ? 1 : 0;\r\n  const otherIdx = idx === 0 ? 1 : 0;\r\n  const tc = turnCount(draftState);\r\n  const premoveWalls = [];\r\n  let premoveGround = null;\r\n  for (let k = 0; k < draftState.premoveActions.length; k++) {\r\n    const act = draftState.premoveActions[k];\r\n    if (cellTypeByPos(act) === \"Wall\") premoveWalls.push(act);\r\n    else premoveGround = act;\r\n  }\r\n  let curPos = draftState.moveHistory[tc].playerPos[idx];\r\n  if (selectedType === \"Wall\" && premoveGround) curPos = premoveGround;\r\n  const actCount = countActions(\r\n    draftState.moveHistory[tc].grid,\r\n    pos,\r\n    curPos,\r\n    draftState.moveHistory[tc].playerPos[otherIdx],\r\n    goals[idx],\r\n    goals[otherIdx],\r\n    premoveWalls\r\n  );\r\n  let premoveGroundDist = null;\r\n  if (premoveGround)\r\n    premoveGroundDist = countActions(\r\n      draftState.moveHistory[tc].grid,\r\n      premoveGround,\r\n      draftState.moveHistory[tc].playerPos[idx],\r\n      draftState.moveHistory[tc].playerPos[otherIdx],\r\n      goals[idx],\r\n      goals[otherIdx],\r\n      premoveWalls\r\n    );\r\n\r\n  if (actCount > 2) return;\r\n\r\n  //see docs/moveLogic.md for the description of the case analysis below\r\n  let premoveState;\r\n  if (draftState.premoveActions.length === 0) premoveState = \"Empty\";\r\n  else if (!premoveGround && premoveWalls.length === 1) premoveState = \"Wall\";\r\n  else if (!premoveGround && premoveWalls.length === 2)\r\n    premoveState = \"WallWall\";\r\n  else if (premoveGround && premoveWalls.length === 1)\r\n    premoveState = \"GroundWall\";\r\n  else if (premoveGround && premoveGroundDist === 1)\r\n    premoveState = \"GroundDist1\";\r\n  else if (premoveGround && premoveGroundDist === 2)\r\n    premoveState = \"GroundDist2\";\r\n  else {\r\n    console.error(\r\n      \"Unknown premove state\",\r\n      premoveGround,\r\n      premoveWalls,\r\n      actCount,\r\n      premoveGroundDist\r\n    );\r\n    return;\r\n  }\r\n\r\n  let newPremoveActions = null;\r\n  if (posEq(pos, curPos)) {\r\n    if (draftState.premoveActions.length === 0) return;\r\n    else {\r\n      //selecting the current position undoes any premoves\r\n      draftState.premoveActions = [];\r\n      return;\r\n    }\r\n  }\r\n\r\n  let [W, W2] = [null, null];\r\n  if (premoveWalls.length === 1) [W, W2] = [premoveWalls[0], null];\r\n  else if (premoveWalls.length === 2)\r\n    [W, W2] = [premoveWalls[0], premoveWalls[1]];\r\n  if (premoveState === \"Empty\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (actCount === 1) newPremoveActions = [pos];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (actCount === 1 || actCount === 2) newPremoveActions = [pos];\r\n      else console.error(\"unreachable case\");\r\n    }\r\n  } else if (premoveState === \"Wall\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (posEq(W, pos)) newPremoveActions = [];\r\n      else if (actCount === 1) newPremoveActions = [W, pos];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (actCount === 1) newPremoveActions = [W, pos];\r\n      else return;\r\n    }\r\n  } else if (premoveState === \"WallWall\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (posEq(W, pos)) newPremoveActions = [W2];\r\n      else if (posEq(W2, pos)) newPremoveActions = [W];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      return;\r\n    }\r\n  } else if (premoveState === \"GroundDist1\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (actCount === 1) newPremoveActions = [premoveGround, pos];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (posEq(pos, premoveGround)) newPremoveActions = [];\r\n      else newPremoveActions = [pos];\r\n    }\r\n  } else if (premoveState === \"GroundDist2\") {\r\n    if (selectedType === \"Wall\") return;\r\n    else if (selectedType === \"Ground\") {\r\n      if (posEq(pos, premoveGround)) newPremoveActions = [];\r\n      else newPremoveActions = [pos];\r\n    }\r\n  } else if (premoveState === \"GroundWall\") {\r\n    if (selectedType === \"Wall\") {\r\n      if (posEq(pos, W)) newPremoveActions = [premoveGround];\r\n      else return;\r\n    } else if (selectedType === \"Ground\") {\r\n      if (posEq(pos, premoveGround)) newPremoveActions = [W];\r\n      else if (actCount === 1) newPremoveActions = [W, pos];\r\n      else return;\r\n    }\r\n  } else {\r\n    console.error(\"unexpected premove state case\", premoveState);\r\n  }\r\n  if (newPremoveActions) draftState.premoveActions = newPremoveActions;\r\n};\r\n\r\nconst closeDialogs = (draftState) => {\r\n  draftState.showRematchDialog = false;\r\n  draftState.showDrawDialog = false;\r\n  draftState.showTakebackDialog = false;\r\n};\r\nconst applyDrawGame = (draftState, finishReason) => {\r\n  if (draftState.lifeCycleStage !== 3) return;\r\n  if (draftState.isVolumeOn) playMoveSound();\r\n  draftState.lifeCycleStage = 4;\r\n  draftState.winner = \"draw\";\r\n  draftState.gameWins[0] += 0.5;\r\n  draftState.gameWins[1] += 0.5;\r\n  draftState.finishReason = finishReason;\r\n  draftState.ghostAction = null;\r\n  closeDialogs(draftState);\r\n};\r\nconst applyResignGame = (draftState, resignerIsCreator) => {\r\n  if (draftState.lifeCycleStage !== 3) return;\r\n  draftState.lifeCycleStage = 4;\r\n  draftState.winner = resignerIsCreator ? \"joiner\" : \"creator\";\r\n  draftState.gameWins[resignerIsCreator ? 1 : 0] += 1;\r\n  draftState.finishReason = \"resign\";\r\n  draftState.ghostAction = null;\r\n  closeDialogs(draftState);\r\n};\r\nconst applyLeaveGame = (draftState, leaverIsCreator) => {\r\n  draftState.opponentLeft = true;\r\n  if (draftState.lifeCycleStage === 4) return;\r\n  draftState.lifeCycleStage = 4;\r\n  draftState.winner = leaverIsCreator ? \"joiner\" : \"creator\";\r\n  draftState.gameWins[leaverIsCreator ? 1 : 0] += 1;\r\n  draftState.finishReason = \"disconnect\";\r\n  draftState.ghostAction = null;\r\n  closeDialogs(draftState);\r\n};\r\nconst applyTakeback = (draftState, requesterIsCreator) => {\r\n  draftState.showTakebackDialog = false;\r\n  if (draftState.lifeCycleStage !== 2 && draftState.lifeCycleStage !== 3)\r\n    return;\r\n  const requesterToMove = requesterIsCreator === creatorToMove(draftState);\r\n  const numMovesToUndo = requesterToMove ? 2 : 1;\r\n  for (let k = 0; k < numMovesToUndo; k++) draftState.moveHistory.pop();\r\n  draftState.ghostAction = null;\r\n  const tc = turnCount(draftState);\r\n  draftState.viewIndex = tc;\r\n  if (tc === 0) draftState.lifeCycleStage = 1;\r\n  else if (tc === 1) draftState.lifeCycleStage = 2;\r\n};\r\nconst applySetupRematch = (draftState) => {\r\n  if (draftState.lifeCycleStage !== 4) return;\r\n  draftState.creatorStarts = !draftState.creatorStarts;\r\n  const newGrid = emptyGrid(boardDims);\r\n  draftState.moveHistory = [\r\n    {\r\n      index: 0,\r\n      actions: [],\r\n      grid: newGrid,\r\n      playerPos: initialPlayerPos,\r\n      timeLeft: [\r\n        draftState.timeControl.duration * 60,\r\n        draftState.timeControl.duration * 60,\r\n      ],\r\n      distances: [\r\n        distance(newGrid, initialPlayerPos[0], goals[0]),\r\n        distance(newGrid, initialPlayerPos[1], goals[1]),\r\n      ],\r\n      wallCounts: [0, 0],\r\n    },\r\n  ];\r\n  draftState.winner = \"\";\r\n  draftState.finishReason = \"\";\r\n  draftState.lifeCycleStage = 1;\r\n  draftState.viewIndex = 0;\r\n  draftState.ghostAction = null;\r\n  closeDialogs(draftState);\r\n};\r\nconst applyAddExtraTime = (draftState, playerIndex) => {\r\n  if (draftState.lifeCycleStage !== 3) return;\r\n  const tc = turnCount(draftState);\r\n  draftState.moveHistory[tc].timeLeft[playerIndex] += 60;\r\n};\r\nconst applyClockTick = (draftState) => {\r\n  //clocks only run after each player have made the first move,\r\n  //and the game has not ended\r\n  if (draftState.lifeCycleStage !== 3) return;\r\n  const idx = indexToMove(draftState);\r\n  const tc = turnCount(draftState);\r\n  draftState.moveHistory[tc].timeLeft[idx] -= 1;\r\n  if (draftState.moveHistory[tc].timeLeft[idx] === 0) {\r\n    draftState.winner = idx === 0 ? \"joiner\" : \"creator\";\r\n    draftState.gameWins[idx === 0 ? 1 : 0] += 1;\r\n    draftState.finishReason = \"time\";\r\n    draftState.lifeCycleStage = 4;\r\n    draftState.ghostAction = null;\r\n    closeDialogs(draftState);\r\n  }\r\n};\r\n\r\nconst GamePage = ({\r\n  socket,\r\n  //clientParams contains 'clientRole' as well as other fields that depend on the client role:\r\n  //timeControl and creatorName for Creator,\r\n  //joinCode and joinerName for Joiner, gameId for Spectator\r\n  clientParams,\r\n  returnToLobby,\r\n  isLargeScreen,\r\n  isDarkModeOn,\r\n  handleToggleDarkMode,\r\n}) => {\r\n  const clientRole = clientParams.clientRole;\r\n\r\n  //cosmetic state stored between sessions\r\n  const [cookies, setCookie] = useCookies([\"isVolumeOn\", \"zoomLevel\"]);\r\n\r\n  //the 'state' object contains every other piece of state\r\n  const [state, updateState] = useImmer(createInitialState(cookies));\r\n\r\n  //===================================================\r\n  //communication FROM the server\r\n  //===================================================\r\n  useEffect(() => {\r\n    socket.once(\"gameCreated\", ({ joinCode, creatorStarts }) => {\r\n      updateState((draftState) => {\r\n        applyCreatedOnServer(draftState, joinCode, creatorStarts);\r\n      });\r\n    });\r\n    socket.once(\"gameJoined\", ({ creatorName, timeControl, creatorStarts }) => {\r\n      updateState((draftState) => {\r\n        applyJoinedOnServer(\r\n          draftState,\r\n          creatorName,\r\n          timeControl,\r\n          creatorStarts\r\n        );\r\n      });\r\n    });\r\n    socket.once(\"requestedGame\", ({ game }) => {\r\n      updateState((draftState) => {\r\n        applyReceivedGame(draftState, game);\r\n      });\r\n    });\r\n    socket.once(\"gameJoinFailed\", () => {\r\n      showToastNotification(\r\n        \"There is no game with this code waiting for someone to join.\",\r\n        5000\r\n      );\r\n      returnToLobby();\r\n    });\r\n    socket.on(\"gameNotFoundError\", () => {\r\n      showToastNotification(\r\n        \"There was an issue on the server and we couldn't reach the other player.\",\r\n        5000\r\n      );\r\n    });\r\n    socket.once(\"joinerJoined\", ({ joinerName }) => {\r\n      updateState((draftState) => {\r\n        if (draftState.lifeCycleStage === 1) return;\r\n        if (draftState.isVolumeOn) playMoveSound();\r\n        applyJoinerJoined(draftState, joinerName);\r\n      });\r\n    });\r\n\r\n    socket.on(\"drawOffered\", () => {\r\n      updateState((draftState) => {\r\n        draftState.showDrawDialog = true;\r\n      });\r\n    });\r\n    socket.on(\"drawRejected\", () => {\r\n      showToastNotification(\"The opponent declined the draw offer.\", 5000);\r\n    });\r\n    socket.on(\"drawAccepted\", () => {\r\n      showToastNotification(\"The opponent accepted the draw offer.\", 5000);\r\n      updateState((draftState) => {\r\n        applyDrawGame(draftState, \"agreement\");\r\n      });\r\n    });\r\n    socket.on(\"takebackRequested\", () => {\r\n      updateState((draftState) => {\r\n        draftState.showTakebackDialog = true;\r\n      });\r\n    });\r\n    socket.on(\"takebackRejected\", () => {\r\n      showToastNotification(\r\n        \"The opponent declined the takeback request.\",\r\n        5000\r\n      );\r\n    });\r\n    socket.on(\"takebackAccepted\", () => {\r\n      showToastNotification(\"The opponent agreed to the takeback.\", 5000);\r\n      updateState((draftState) => {\r\n        const requesterIsCreator = clientRole === \"Creator\";\r\n        applyTakeback(draftState, requesterIsCreator);\r\n      });\r\n    });\r\n    socket.on(\"rematchOffered\", () => {\r\n      updateState((draftState) => {\r\n        draftState.showRematchDialog = true;\r\n      });\r\n    });\r\n    socket.on(\"rematchRejected\", () => {\r\n      showToastNotification(\"The opponent declined the rematch offer.\", 5000);\r\n    });\r\n    socket.on(\"rematchAccepted\", () => {\r\n      showToastNotification(\"The opponent accepted the rematch offer.\", 5000);\r\n      updateState((draftState) => {\r\n        if (draftState.isVolumeOn) playMoveSound();\r\n        applySetupRematch(draftState);\r\n      });\r\n    });\r\n    socket.on(\"extraTimeReceived\", () => {\r\n      showToastNotification(\"The opponent added 60s to your clock.\", 5000);\r\n      updateState((draftState) => {\r\n        const playerIndex = clientRole === \"Creator\" ? 0 : 1;\r\n        applyAddExtraTime(draftState, playerIndex);\r\n      });\r\n    });\r\n    socket.on(\"resigned\", () => {\r\n      showToastNotification(\"The opponent resigned.\", 5000);\r\n      updateState((draftState) => {\r\n        if (draftState.isVolumeOn) playMoveSound();\r\n        const resignerIsCreator = clientRole !== \"Creator\";\r\n        applyResignGame(draftState, resignerIsCreator);\r\n      });\r\n    });\r\n    socket.on(\"moved\", ({ actions, moveIndex, remainingTime }) => {\r\n      updateState((draftState) => {\r\n        console.log(`move ${moveIndex} received (${remainingTime}s)`);\r\n        if (draftState.isVolumeOn) playMoveSound();\r\n        applyMove(draftState, actions, remainingTime, moveIndex);\r\n      });\r\n    });\r\n    socket.on(\"leftGame\", () => {\r\n      showToastNotification(\"The opponent left the game.\", 5000);\r\n\r\n      updateState((draftState) => {\r\n        const leaverIsCreator = clientRole === \"Creator\" ? false : true;\r\n        applyLeaveGame(draftState, leaverIsCreator);\r\n      });\r\n    });\r\n    return () => {\r\n      socket.removeAllListeners();\r\n    };\r\n  }, [socket, updateState, clientRole, returnToLobby]);\r\n\r\n  //===================================================\r\n  //communication TO the server\r\n  //===================================================\r\n  //first contact to server\r\n  useEffect(() => {\r\n    //first contact only from lifecycle stage -2\r\n    if (state.lifeCycleStage !== -2) return;\r\n    if (clientRole === \"Creator\") {\r\n      updateState((draftState) => {\r\n        applyAddCreator(\r\n          draftState,\r\n          clientParams.timeControl,\r\n          clientParams.creatorName\r\n        );\r\n      });\r\n      socket.emit(\"createGame\", {\r\n        creatorName: clientParams.creatorName,\r\n        timeControl: clientParams.timeControl,\r\n      });\r\n    } else if (clientRole === \"Joiner\") {\r\n      updateState((draftState) => {\r\n        applyAddJoiner(\r\n          draftState,\r\n          clientParams.joinCode,\r\n          clientParams.joinerName\r\n        );\r\n      });\r\n      socket.emit(\"joinGame\", {\r\n        joinCode: clientParams.joinCode,\r\n        joinerName: clientParams.joinerName,\r\n      });\r\n    } else if (clientRole === \"Spectator\") {\r\n      socket.emit(\"getGame\", { gameId: clientParams.gameId });\r\n    } else {\r\n      console.error(\"unknown client role\", clientRole);\r\n    }\r\n  });\r\n\r\n  const handleLeaveGame = () => {\r\n    //tell the server to stop listening to events for this game\r\n    socket.emit(\"leaveGame\");\r\n    returnToLobby();\r\n  };\r\n  const handleSendRematchOffer = () => {\r\n    socket.emit(\"offerRematch\");\r\n  };\r\n  const handleAnswerRematchOffer = (accepted) => {\r\n    if (accepted) {\r\n      socket.emit(\"acceptRematch\");\r\n      updateState((draftState) => {\r\n        applySetupRematch(draftState);\r\n      });\r\n    } else {\r\n      socket.emit(\"rejectRematch\");\r\n      updateState((draftState) => {\r\n        draftState.showRematchDialog = false;\r\n      });\r\n    }\r\n  };\r\n  const handleOfferDraw = () => {\r\n    socket.emit(\"offerDraw\");\r\n  };\r\n  const handleAnswerDrawOffer = (accepted) => {\r\n    if (accepted) {\r\n      socket.emit(\"acceptDraw\");\r\n      updateState((draftState) => {\r\n        applyDrawGame(draftState, \"agreement\");\r\n      });\r\n    } else {\r\n      socket.emit(\"rejectDraw\");\r\n      updateState((draftState) => {\r\n        draftState.showDrawDialog = false;\r\n      });\r\n    }\r\n  };\r\n  const handleRequestTakeback = () => {\r\n    socket.emit(\"requestTakeback\");\r\n  };\r\n  const handleAnswerTakebackRequest = (accepted) => {\r\n    if (accepted) {\r\n      showToastNotification(\r\n        \"The last move played on the board has been undone.\",\r\n        5000\r\n      );\r\n      socket.emit(\"acceptTakeback\");\r\n      updateState((draftState) => {\r\n        const requesterIsCreator = clientRole === \"Joiner\";\r\n        applyTakeback(draftState, requesterIsCreator);\r\n      });\r\n    } else {\r\n      socket.emit(\"rejectTakeback\");\r\n      updateState((draftState) => {\r\n        draftState.showTakebackDialog = false;\r\n      });\r\n    }\r\n  };\r\n  const handleGiveExtraTime = () => {\r\n    socket.emit(\"giveExtraTime\");\r\n    updateState((draftState) => {\r\n      const receiverIndex = clientRole === \"Creator\" ? 1 : 0;\r\n      applyAddExtraTime(draftState, receiverIndex);\r\n    });\r\n  };\r\n  const handleResign = () => {\r\n    socket.emit(\"resign\");\r\n    updateState((draftState) => {\r\n      applyResignGame(draftState, clientRole === \"Creator\");\r\n    });\r\n  };\r\n\r\n  //===================================================\r\n  //timers logic\r\n  //===================================================\r\n  //timer interval to update clocks every second\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      updateState((draftState) => {\r\n        applyClockTick(draftState);\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [updateState]);\r\n\r\n  //===================================================\r\n  //game logic when a player selects a board cell\r\n  //===================================================\r\n\r\n  //manage the state change on click or keyboard press. this may\r\n  //change the ghost action (which is only shown to this client), or\r\n  //make a full move, in which case it is also sent to the other client\r\n  const handleSelectedCell = (pos) => {\r\n    updateState((draftState) => {\r\n      const clientToMove =\r\n        creatorToMove(draftState) === (clientRole === \"Creator\");\r\n      applySelectedCell(draftState, pos, clientToMove, true);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.moveToSend) {\r\n      socket.emit(\"move\", state.moveToSend);\r\n      updateState((draftState) => {\r\n        draftState.moveToSend = null;\r\n      });\r\n    }\r\n  });\r\n\r\n  //notify server if someone has won on time or by reaching the goal\r\n  //this is necessary because the server does not keep its own clock\r\n  //and does not understand the rules of the game\r\n  useEffect(() => {\r\n    //only the creator sends these messages to avoid duplicates\r\n    if (clientRole !== \"Creator\") return;\r\n    if (state.finishReason === \"time\") {\r\n      socket.emit(\"playerWonOnTime\", { winner: state.winner });\r\n    }\r\n    if (state.finishReason === \"goal\") {\r\n      socket.emit(\"playerReachedGoal\", { winner: state.winner });\r\n    }\r\n  }, [clientRole, socket, state.winner, state.finishReason]);\r\n\r\n  const handleBoardClick = (clickedPos) => handleSelectedCell(clickedPos);\r\n\r\n  //===================================================\r\n  //handling keyboard inputs\r\n  //===================================================\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  });\r\n  const downHandler = ({ key }) => {\r\n    //mechanism to avoid double-counting\r\n    if (state.isKeyPressed) return;\r\n    updateState((draftState) => {\r\n      draftState.isKeyPressed = true;\r\n    });\r\n    if (key === \"m\") {\r\n      handleToggleVolume();\r\n      return;\r\n    }\r\n\r\n    //if the user is not looking at the latest position,\r\n    //or if the game is over, arrows are used to navigate\r\n    if (state.viewIndex < turnCount(state) || state.lifeCycleStage === 4) {\r\n      if (key === \"ArrowDown\" || key === \"ArrowRight\") {\r\n        if (state.viewIndex < turnCount(state)) {\r\n          updateState((draftState) => {\r\n            draftState.viewIndex += 1;\r\n          });\r\n        }\r\n      } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\r\n        if (state.viewIndex > 0) {\r\n          updateState((draftState) => {\r\n            draftState.viewIndex -= 1;\r\n          });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    //normal case: use arrow keys to move the player token\r\n    let p;\r\n    if (state.ghostAction && ghostType(state.ghostAction) === \"Ground\")\r\n      p = state.ghostAction;\r\n    else {\r\n      const tc = turnCount(state);\r\n      p = state.moveHistory[tc].playerPos[indexToMove(state)];\r\n    }\r\n    if (key === \"ArrowDown\") p = { r: p.r + 2, c: p.c };\r\n    else if (key === \"ArrowUp\") p = { r: p.r - 2, c: p.c };\r\n    else if (key === \"ArrowLeft\") p = { r: p.r, c: p.c - 2 };\r\n    else if (key === \"ArrowRight\") p = { r: p.r, c: p.c + 2 };\r\n    else return;\r\n    handleSelectedCell(p);\r\n  };\r\n  const upHandler = () => {\r\n    updateState((draftState) => {\r\n      draftState.isKeyPressed = false;\r\n    });\r\n  };\r\n\r\n  //===================================================\r\n  //logic related to navigating through the move history\r\n  //===================================================\r\n  const handleViewMove = (i) => {\r\n    if (i < 0 || i > turnCount(state)) return;\r\n    updateState((draftState) => {\r\n      if (draftState.viewIndex === i) return;\r\n      if (i > turnCount(draftState)) return;\r\n      draftState.viewIndex = i;\r\n      draftState.ghostAction = null;\r\n    });\r\n  };\r\n\r\n  //move the inner scroll bar on move history to the end after each move\r\n  useEffect(() => {\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = moveHistoryDiv.scrollHeight;\r\n  }, [state.moveHistory]);\r\n\r\n  const handleSeePreviousMove = () => handleViewMove(state.viewIndex - 1);\r\n  const handleSeeNextMove = () => handleViewMove(state.viewIndex + 1);\r\n  const handleSeeFirstMove = () => {\r\n    handleViewMove(0);\r\n    //move the inner scroll bar to the beginning\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = 0;\r\n  };\r\n  const handleSeeLastMove = () => {\r\n    handleViewMove(turnCount(state));\r\n    //move the inner scroll bar to the end\r\n    const moveHistoryDiv = document.getElementById(\"movehistory\");\r\n    moveHistoryDiv.scrollTop = moveHistoryDiv.scrollHeight;\r\n  };\r\n\r\n  //===================================================\r\n  //cosmetics logic\r\n  //===================================================\r\n  const handleToggleVolume = () => {\r\n    setCookie(\"isVolumeOn\", state.isVolumeOn ? \"false\" : \"true\", {\r\n      path: \"/\",\r\n    });\r\n    updateState((draftState) => {\r\n      draftState.isVolumeOn = !draftState.isVolumeOn;\r\n    });\r\n  };\r\n  const handleIncreaseBoardSize = () => {\r\n    if (state.zoomLevel < 10)\r\n      setCookie(\"zoomLevel\", state.zoomLevel + 1, { path: \"/\" });\r\n    updateState((draftState) => {\r\n      if (draftState.zoomLevel < 10) draftState.zoomLevel += 1;\r\n    });\r\n  };\r\n  const handleDecreaseBoardSize = () => {\r\n    if (state.zoomLevel > 0)\r\n      setCookie(\"zoomLevel\", state.zoomLevel - 1, { path: \"/\" });\r\n    updateState((draftState) => {\r\n      if (draftState.zoomLevel > 0) draftState.zoomLevel -= 1;\r\n    });\r\n  };\r\n\r\n  //===================================================\r\n  //handle browser's back arrow / history\r\n  //===================================================\r\n  const onBackButtonEvent = (e) => {\r\n    e.preventDefault();\r\n    updateState((draftState) => {\r\n      draftState.showBackButtonWarning = true;\r\n    });\r\n  };\r\n  const handleAnswerConfirmBackButton = (confirmed) => {\r\n    if (confirmed) {\r\n      updateState((draftState) => {\r\n        draftState.showBackButtonWarning = false;\r\n      });\r\n      handleLeaveGame();\r\n    } else {\r\n      updateState((draftState) => {\r\n        draftState.showBackButtonWarning = false;\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    window.history.pushState(null, null, window.location.pathname);\r\n    window.addEventListener(\"popstate\", onBackButtonEvent);\r\n    return () => window.removeEventListener(\"popstate\", onBackButtonEvent);\r\n  });\r\n\r\n  //===================================================\r\n  //preparing props for rendering\r\n  //===================================================\r\n  //after the game is over, the players can see how much time they\r\n  //had left at each move. During the game, they ALWAYS see the current time\r\n  let displayTime1, displayTime2;\r\n  if (state.lifeCycleStage === 4) {\r\n    [displayTime1, displayTime2] = state.moveHistory[state.viewIndex].timeLeft;\r\n  } else {\r\n    const tc = turnCount(state);\r\n    [displayTime1, displayTime2] = state.moveHistory[tc].timeLeft;\r\n  }\r\n\r\n  let [gSize, wWidth] = isLargeScreen\r\n    ? [globalSettings.groundSize, globalSettings.wallWidth]\r\n    : [\r\n        globalSettings.smallScreenGroundSize,\r\n        globalSettings.smallScreenWallWidth,\r\n      ];\r\n  const scalingFactor = Math.pow(1.1, state.zoomLevel - 5);\r\n  const scaledGroundSize = gSize * scalingFactor;\r\n  const scaledWallWidth = wWidth * scalingFactor;\r\n  const boardHeight =\r\n    (scaledWallWidth * (boardDims.h - 1)) / 2 +\r\n    (scaledGroundSize * (boardDims.h + 1)) / 2;\r\n  const boardWidth =\r\n    (scaledWallWidth * (boardDims.w - 1)) / 2 +\r\n    (scaledGroundSize * (boardDims.w + 1)) / 2;\r\n\r\n  const gapSize = isLargeScreen ? 15 : 6;\r\n  let gridTemplateRows, gridTemplateColumns, gridTemplateAreas;\r\n  if (isLargeScreen) {\r\n    const timersHeight = 100;\r\n    const controlPanelWidth = 360;\r\n    gridTemplateRows = `${timersHeight}px ${boardHeight}px`;\r\n    gridTemplateColumns = `${boardWidth}px ${controlPanelWidth}px`;\r\n    gridTemplateAreas = \"'timer status' 'board panel'\";\r\n  } else {\r\n    const timersHeight = 50;\r\n    const statusHeaderHeight = 80;\r\n    gridTemplateRows = `${timersHeight}px ${boardHeight}px ${statusHeaderHeight}px ${boardHeight}px`;\r\n    gridTemplateColumns = `${boardWidth}px`;\r\n    gridTemplateAreas = \"'timer' 'board' 'status' 'panel'\";\r\n  }\r\n\r\n  return (\r\n    <div className={isDarkModeOn ? \"teal darken-4\" : undefined}>\r\n      <Header\r\n        gameName={clientRole === \"Spectator\" ? \"\" : state.joinCode}\r\n        helpText={GameHelp()}\r\n        isLargeScreen={isLargeScreen}\r\n        isDarkModeOn={isDarkModeOn}\r\n        handleToggleDarkMode={handleToggleDarkMode}\r\n      />\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateRows: gridTemplateRows,\r\n          gridTemplateColumns: gridTemplateColumns,\r\n          gridTemplateAreas: gridTemplateAreas,\r\n          columnGap: `${gapSize}px`,\r\n          rowGap: `${gapSize}px`,\r\n          margin: `${gapSize}px`,\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n        }}\r\n      >\r\n        <TimerHeader\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          names={state.names}\r\n          indexToMove={indexToMove(state)}\r\n          playerColors={globalSettings.playerColors}\r\n          timeLeft={[displayTime1, displayTime2]}\r\n          isLargeScreen={isLargeScreen}\r\n          scores={state.gameWins}\r\n        />\r\n        <StatusHeader\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          names={state.names}\r\n          indexToMove={indexToMove(state)}\r\n          winner={state.winner}\r\n          finishReason={state.finishReason}\r\n          timeControl={state.timeControl}\r\n          creatorStarts={state.creatorStarts}\r\n          isLargeScreen={isLargeScreen}\r\n        />\r\n        <Board\r\n          creatorToMove={creatorToMove(state)}\r\n          playerColors={globalSettings.playerColors}\r\n          grid={state.moveHistory[state.viewIndex].grid}\r\n          playerPos={state.moveHistory[state.viewIndex].playerPos}\r\n          goals={goals}\r\n          ghostAction={state.ghostAction}\r\n          premoveActions={state.premoveActions}\r\n          handleClick={handleBoardClick}\r\n          groundSize={scaledGroundSize}\r\n          wallWidth={scaledWallWidth}\r\n          isDarkModeOn={isDarkModeOn}\r\n        />\r\n        <ControlPanel\r\n          lifeCycleStage={state.lifeCycleStage}\r\n          handleResign={handleResign}\r\n          handleOfferDraw={handleOfferDraw}\r\n          handleRequestTakeback={handleRequestTakeback}\r\n          handleGiveExtraTime={handleGiveExtraTime}\r\n          moveHistory={state.moveHistory}\r\n          playerColors={globalSettings.playerColors}\r\n          clientRole={clientRole}\r\n          creatorStarts={state.creatorStarts}\r\n          handleViewMove={handleViewMove}\r\n          viewIndex={state.viewIndex}\r\n          turnCount={turnCount(state)}\r\n          handleSeeFirstMove={handleSeeFirstMove}\r\n          handleSeePreviousMove={handleSeePreviousMove}\r\n          handleSeeNextMove={handleSeeNextMove}\r\n          handleSeeLastMove={handleSeeLastMove}\r\n          handleToggleVolume={handleToggleVolume}\r\n          isVolumeOn={state.isVolumeOn}\r\n          handleLeaveGame={handleLeaveGame}\r\n          isDarkModeOn={isDarkModeOn}\r\n          handleIncreaseBoardSize={handleIncreaseBoardSize}\r\n          handleDecreaseBoardSize={handleDecreaseBoardSize}\r\n          zoomLevel={state.zoomLevel}\r\n          boardHeight={boardHeight}\r\n        />\r\n      </div>\r\n      {state.lifeCycleStage === 4 && clientRole !== \"Spectator\" && (\r\n        <Row className=\"valign-wrapper\" style={{ marginTop: \"1rem\" }}>\r\n          <Col className=\"center\" s={12}>\r\n            <Button\r\n              large\r\n              className=\"red\"\r\n              node=\"button\"\r\n              waves=\"light\"\r\n              onClick={() => {\r\n                showToastNotification(\r\n                  \"A rematch offer was sent to the opponent. A new game \" +\r\n                    \"will start if they accept.\",\r\n                  5000\r\n                );\r\n                handleSendRematchOffer();\r\n              }}\r\n              disabled={state.opponentLeft}\r\n            >\r\n              Rematch\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <Dialog\r\n        isOpen={state.showBackButtonWarning}\r\n        title=\"Return to lobby\"\r\n        body={\r\n          \"Are you sure you want to return to the lobby? You will \" +\r\n          \"not be able to rejoin this game.\"\r\n        }\r\n        acceptButtonText=\"Quit game\"\r\n        rejectButtonText=\"Stay in game\"\r\n        callback={handleAnswerConfirmBackButton}\r\n      />\r\n      <Dialog\r\n        isOpen={state.showDrawDialog}\r\n        title=\"Draw offer received\"\r\n        body=\"The opponent offered a draw.\"\r\n        acceptButtonText=\"Accept\"\r\n        rejectButtonText=\"Decline\"\r\n        callback={handleAnswerDrawOffer}\r\n      />\r\n      <Dialog\r\n        isOpen={state.showRematchDialog}\r\n        title=\"Rematch offer received\"\r\n        body=\"The opponent would like a rematch.\"\r\n        acceptButtonText=\"Accept\"\r\n        rejectButtonText=\"Decline\"\r\n        callback={handleAnswerRematchOffer}\r\n      />\r\n      <Dialog\r\n        isOpen={state.showTakebackDialog}\r\n        title=\"Takeback request received\"\r\n        body={\r\n          \"The opponent requested a takeback. If you accept, their \" +\r\n          \"last move will be undone.\"\r\n        }\r\n        acceptButtonText=\"Accept\"\r\n        rejectButtonText=\"Decline\"\r\n        callback={handleAnswerTakebackRequest}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React, { useEffect } from \"react\";\r\nimport { Row, Col, TextInput, Button, Icon } from \"react-materialize\";\r\nimport showToastNotification from \"../shared/showToastNotification\";\r\n\r\nconst LobbyForm = ({\r\n  playerName,\r\n  handlePlayerName,\r\n  duration,\r\n  handleDuration,\r\n  increment,\r\n  handleIncrement,\r\n  joinCode,\r\n  handleJoinCode,\r\n  handleCreateGame,\r\n  handleJoinGame,\r\n  handleRefreshName,\r\n}) => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n    };\r\n  });\r\n\r\n  const downHandler = ({ key }) => {\r\n    if (key !== \"Enter\") return;\r\n    if (joinCode.length > 0) handleJoinGame();\r\n    else {\r\n      showToastNotification(\"Created new game\", 5000);\r\n      handleCreateGame();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container teal darken-2\" style={{ marginTop: \"2rem\" }}>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={5} m={4}>\r\n          <h5>Your name:</h5>\r\n        </Col>\r\n        <Col s={5} m={3}>\r\n          <TextInput\r\n            id=\"nameInput\"\r\n            value={playerName}\r\n            onChange={handlePlayerName}\r\n          />\r\n        </Col>\r\n        <Col s={1} m={1}>\r\n          <Button\r\n            className=\"teal lighten-2\"\r\n            node=\"button\"\r\n            waves=\"light\"\r\n            small\r\n            floating\r\n            style={{ color: \"white\" }}\r\n            icon={<Icon>refresh</Icon>}\r\n            onClick={handleRefreshName}\r\n            tooltip={\"Get a new name\"}\r\n          />\r\n        </Col>\r\n        <Col s={1} m={4}></Col>\r\n      </Row>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={5} m={4}>\r\n          <Button node=\"button\" waves=\"light\" onClick={handleCreateGame}>\r\n            Create game\r\n          </Button>\r\n        </Col>\r\n        <Col s={2} m={1} style={{ paddingRight: \"0\" }}>\r\n          <TextInput\r\n            id=\"durationInput\"\r\n            label=\"Duration\"\r\n            value={`${duration}`}\r\n            onChange={handleDuration}\r\n          />\r\n        </Col>\r\n        <Col s={1} m={1} style={{ paddingLeft: \"0\" }}>\r\n          m\r\n        </Col>\r\n        <Col s={2} m={1} style={{ paddingRight: \"0\" }}>\r\n          <TextInput\r\n            id=\"incrementInput\"\r\n            label=\"Increment\"\r\n            value={`${increment}`}\r\n            onChange={handleIncrement}\r\n          />\r\n        </Col>\r\n        <Col s={1} m={1} style={{ paddingLeft: \"0\" }}>\r\n          s\r\n        </Col>\r\n        <Col s={1} m={4}></Col>\r\n      </Row>\r\n      <Row className=\"valign-wrapper\">\r\n        <Col className=\"center\" s={5} m={4}>\r\n          <Button node=\"button\" waves=\"light\" onClick={handleJoinGame}>\r\n            Join game\r\n          </Button>\r\n        </Col>\r\n        <Col s={6} m={5}>\r\n          <TextInput\r\n            id=\"joinInput\"\r\n            placeholder=\"Write game code here...\"\r\n            value={`${joinCode}`}\r\n            onChange={handleJoinCode}\r\n          />\r\n        </Col>\r\n        <Col s={1} m={3}></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyForm;\r\n","import React from \"react\";\r\n\r\nconst LobbyHelp = () => (\r\n  <div>\r\n    <h6>\r\n      This is the lobby. Here, you can create games that your friends can join,\r\n      or join a friend's game. Click on the code to copy it to the clipboard.\r\n    </h6>\r\n    <h6>\r\n      When you create a game, you can choose the <em>duration</em> (the time\r\n      that each player has) and a time<em>increment</em> that is added to each\r\n      player after they move.\r\n    </h6>\r\n    <h6>\r\n      Once you create a game, a <em>game code</em> will appear in the top\r\n      header. Share this code with your friend to play with them.\r\n    </h6>\r\n    <h6>\r\n      To join a friend's game, write the code they give you in the box next to\r\n      the \"Join game\" button and click it.\r\n    </h6>\r\n    <h6>\r\n      A random <em>username</em> has been chosen for you, but you can change it.\r\n    </h6>\r\n  </div>\r\n);\r\n\r\nexport default LobbyHelp;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport globalSettings from \"../shared/globalSettings\";\r\nimport { useImmer } from \"use-immer\";\r\nimport Board from \"../game/Board\";\r\nimport { cellTypeByPos, emptyGrid } from \"../gameLogic/mainLogic\";\r\n\r\nconst GameShowcase = ({\r\n  socket,\r\n  isLargeScreen,\r\n  isDarkModeOn,\r\n  handleViewGame,\r\n}) => {\r\n  const [state, updateState] = useImmer({\r\n    game: null,\r\n    nextMove: 0,\r\n    grid: emptyGrid(globalSettings.boardDims),\r\n    playerPos: globalSettings.initialPlayerPos,\r\n    needToRequestGame: true,\r\n    // when a game stops playing, animation will wait 3 cycles to start a new game\r\n    finishedGameWait: 3,\r\n  });\r\n\r\n  //timer interval to play a move every 3 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      //ask server for games\r\n      if (state.needToRequestGame) {\r\n        updateState((draftState) => {\r\n          draftState.needToRequestGame = false;\r\n        });\r\n        socket.emit(\"getRandomGame\");\r\n        return;\r\n      }\r\n      if (!state.game) return; //already asked for game, but don't have it yet\r\n      if (!state.game.moveHistory) {\r\n        console.log(\"Error: game does not have a move history\");\r\n        return;\r\n      }\r\n      //finished playing game, request a new one\r\n      if (state.nextMove === state.game.moveHistory.length) {\r\n        updateState((draftState) => {\r\n          if (draftState.finishedGameWait > 0) draftState.finishedGameWait--;\r\n          else {\r\n            draftState.game = null;\r\n            draftState.needToRequestGame = true;\r\n            draftState.finishedGameWait = 3;\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      //play one move\r\n      updateState((draftState) => {\r\n        if (\r\n          !draftState.game ||\r\n          !draftState.game.moveHistory ||\r\n          draftState.nextMove === draftState.game.moveHistory.length\r\n        )\r\n          return;\r\n\r\n        const creatorToMove =\r\n          draftState.nextMove % 2 === (draftState.game.creatorStarts ? 0 : 1);\r\n        const idxToMove = creatorToMove ? 0 : 1;\r\n        const actions =\r\n          draftState.game.moveHistory[draftState.nextMove].actions;\r\n        for (let k = 0; k < actions.length; k++) {\r\n          const pos = actions[k];\r\n          if (cellTypeByPos(pos) === \"Ground\") {\r\n            draftState.playerPos[idxToMove] = pos;\r\n          } else {\r\n            draftState.grid[pos.r][pos.c] = idxToMove + 1;\r\n          }\r\n        }\r\n        draftState.nextMove++;\r\n      });\r\n    }, 2000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  //setup game received from server\r\n  useEffect(() => {\r\n    socket.on(\"requestedRandomGame\", ({ game }) => {\r\n      updateState((draftState) => {\r\n        draftState.game = game;\r\n        draftState.nextMove = 0;\r\n        draftState.grid = emptyGrid(globalSettings.boardDims);\r\n        draftState.playerPos = globalSettings.initialPlayerPos;\r\n      });\r\n    });\r\n  }, [socket, updateState, state.needToRequestGame]);\r\n\r\n  return (\r\n    <Board\r\n      creatorToMove={false}\r\n      playerColors={globalSettings.playerColors}\r\n      grid={state.grid}\r\n      playerPos={state.playerPos}\r\n      goals={globalSettings.goals}\r\n      ghostAction={null}\r\n      premoveActions={[]}\r\n      handleClick={() => handleViewGame(state.game._id)}\r\n      groundSize={\r\n        isLargeScreen\r\n          ? globalSettings.groundSize\r\n          : globalSettings.smallScreenGroundSize\r\n      }\r\n      wallWidth={\r\n        isLargeScreen\r\n          ? globalSettings.wallWidth\r\n          : globalSettings.smallScreenWallWidth\r\n      }\r\n      isDarkModeOn={isDarkModeOn}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GameShowcase;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table } from \"react-materialize\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\n\r\nimport globalSettings from \"../shared/globalSettings\";\r\nimport { cellTypeByPos, emptyGrid, distance } from \"../gameLogic/mainLogic\";\r\n\r\n//duplicated from MoveHistory\r\nconst thClassName = \"teal darken-2\";\r\nconst thStyle = {\r\n  position: \"sticky\",\r\n  top: \"0px\",\r\n  paddingTop: \"0.15rem\",\r\n  paddingBottom: \"0.15rem\",\r\n  borderRadius: \"0\",\r\n};\r\nconst tdStyle = {\r\n  paddingTop: \"0.15rem\",\r\n  paddingBottom: \"0.15rem\",\r\n  borderRadius: \"0\",\r\n};\r\n\r\n//duplicated from StatusHeader\r\nconst roundNum = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\r\n\r\nconst timeControlToString = (timeControl) => {\r\n  return roundNum(timeControl.duration) + \"+\" + roundNum(timeControl.increment);\r\n};\r\n\r\nconst winnerToString = (serverGame) => {\r\n  if (serverGame.winner === \"creator\") return \"<\";\r\n  else if (serverGame.winner === \"draw\") return \"=\";\r\n  else return \">\";\r\n};\r\nconst finalDistsToString = (serverGame) => {\r\n  const grid = emptyGrid(globalSettings.boardDims);\r\n  const playerPos = cloneDeep(globalSettings.initialPlayerPos);\r\n  let idxToMove = serverGame.creatorStarts ? 0 : 1;\r\n  for (let k = 0; k < serverGame.moveHistory.length; k++) {\r\n    const actions = serverGame.moveHistory[k].actions;\r\n    for (let k2 = 0; k2 < actions.length; k2++) {\r\n      const pos = actions[k2];\r\n      if (cellTypeByPos(pos) === \"Ground\") {\r\n        playerPos[idxToMove] = pos;\r\n      } else {\r\n        grid[pos.r][pos.c] = idxToMove + 1;\r\n      }\r\n    }\r\n    idxToMove = (idxToMove + 1) % 2;\r\n  }\r\n  const [g1, g2] = globalSettings.goals;\r\n  const [d1, d2] = [\r\n    distance(grid, playerPos[0], g1),\r\n    distance(grid, playerPos[1], g2),\r\n  ];\r\n  return d1 + \" - \" + d2;\r\n};\r\n\r\nfunction prettyDate(date, longFormat) {\r\n  if (!date) return \"-\";\r\n  const curTime = new Date().getTime();\r\n  const dateTime = new Date(date).getTime();\r\n  const seconds = Math.floor((curTime - dateTime) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 2592000);\r\n  if (interval > 1) return date.toDateString.substring(4, 10);\r\n\r\n  interval = Math.floor(seconds / 86400);\r\n  if (interval === 1) return longFormat ? \"1 day ago\" : \"1d ago\";\r\n  if (interval > 1) return interval + (longFormat ? \" days\" : \"d\") + \" ago\";\r\n\r\n  interval = Math.floor(seconds / 3600);\r\n  if (interval === 1) return longFormat ? \"1 hour ago\" : \"1h ago\";\r\n  if (interval > 1) return interval + (longFormat ? \" hours\" : \"h\") + \" ago\";\r\n\r\n  interval = Math.floor(seconds / 60);\r\n  if (interval === 1) return longFormat ? \"1 minute ago\" : \"1m ago\";\r\n  if (interval > 1) return interval + (longFormat ? \" minutes\" : \"m\") + \" ago\";\r\n\r\n  return \"Just now\";\r\n}\r\n\r\nconst RecentGameList = ({\r\n  socket,\r\n  isLargeScreen,\r\n  isDarkModeOn,\r\n  handleViewGame,\r\n}) => {\r\n  const [recentGames, setRecentGames] = useState(null);\r\n  const [needToRequestGames, setNeedToRequestGames] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!needToRequestGames) return;\r\n    setNeedToRequestGames(false);\r\n    socket.emit(\"getRecentGames\");\r\n  }, [socket, needToRequestGames]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"requestedRecentGames\", ({ games }) => {\r\n      setRecentGames(games);\r\n    });\r\n  }, [socket, needToRequestGames]);\r\n\r\n  if (!recentGames) return <div></div>;\r\n  if (isLargeScreen) {\r\n    return (\r\n      <div\r\n        className={\"center\"}\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          display: \"block\",\r\n          height: \"100%\",\r\n          border: \"1px solid #00796d\",\r\n        }}\r\n      >\r\n        <Table centered style={{ width: \"100%\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th className={thClassName} style={thStyle}>\r\n                Time\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Player 1\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Final Distance\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Player 2\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Turns\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Date\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {recentGames &&\r\n              recentGames.map((game, i) => {\r\n                let color = \"red\";\r\n                color += isDarkModeOn ? \" darken-\" : \" lighten-\";\r\n                color += 1 + (i % 2);\r\n\r\n                return (\r\n                  <tr\r\n                    onClick={() => handleViewGame(game._id)}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    key={i}\r\n                    className={color}\r\n                  >\r\n                    <td style={tdStyle}>\r\n                      {timeControlToString(game.timeControl)}\r\n                    </td>\r\n                    <td style={tdStyle}>{game.playerNames[0]}</td>\r\n                    <td style={tdStyle}>{finalDistsToString(game)}</td>\r\n                    <td style={tdStyle}>{game.playerNames[1]}</td>\r\n                    <td style={tdStyle}>{game.moveHistory.length}</td>\r\n                    <td style={tdStyle}>{prettyDate(game.startDate, true)}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div\r\n        className={\"center\"}\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          display: \"block\",\r\n          height: \"100%\",\r\n          border: \"1px solid #00796d\",\r\n        }}\r\n      >\r\n        <Table centered style={{ width: \"100%\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th className={thClassName} style={thStyle}>\r\n                Time\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Player 1\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Win\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Player 2\r\n              </th>\r\n              <th className={thClassName} style={thStyle}>\r\n                Date\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {recentGames &&\r\n              recentGames.map((game, i) => {\r\n                let color = \"red\";\r\n                color += isDarkModeOn ? \" darken-\" : \" lighten-\";\r\n                color += 1 + (i % 2);\r\n\r\n                return (\r\n                  <tr\r\n                    onClick={() => handleViewGame(game._id)}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    key={i}\r\n                    className={color}\r\n                  >\r\n                    <td style={tdStyle}>\r\n                      {timeControlToString(game.timeControl)}\r\n                    </td>\r\n                    <td style={tdStyle}>{game.playerNames[0]}</td>\r\n                    <td style={tdStyle}>{winnerToString(game)}</td>\r\n                    <td style={tdStyle}>{game.playerNames[1]}</td>\r\n                    <td style={tdStyle}>{prettyDate(game.startDate, false)}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default RecentGameList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { uniqueNamesGenerator, names } from \"unique-names-generator\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nimport globalSettings from \"../shared/globalSettings\";\r\nimport GamePage from \"../game/GamePage\";\r\nimport Header from \"../shared/Header\";\r\nimport LobbyForm from \"./LobbyForm\";\r\nimport LobbyHelp from \"./LobbyHelp\";\r\nimport showToastNotification from \"../shared/showToastNotification\";\r\nimport GameShowcase from \"./GameShowcase\";\r\nimport RecentGameList from \"./RecentGameList\";\r\n\r\nconst maxPlayerNameLen = 9;\r\n\r\nconst randPlayerName = () =>\r\n  uniqueNamesGenerator({\r\n    dictionaries: [names],\r\n    length: 1,\r\n  }).slice(0, maxPlayerNameLen);\r\n\r\nconst LobbyPage = ({ socket }) => {\r\n  //the player name is saved in a cookie when the player uses a name\r\n  //to create or join a game. the time control is saved when the player\r\n  //creates a game\r\n  const [cookies, setCookie] = useCookies([\r\n    \"playerName\",\r\n    \"duration\",\r\n    \"increment\",\r\n    \"isDarkModeOn\",\r\n  ]);\r\n\r\n  const [playerName, setPlayerName] = useState(\r\n    cookies.playerName || randPlayerName()\r\n  );\r\n  const [duration, setDuration] = useState(cookies.duration || 5);\r\n  const [increment, setIncrement] = useState(cookies.increment || 5);\r\n  const [joinCode, setJoinCode] = useState(\"\");\r\n  const [isOngoingGame, setIsOngoingGame] = useState(false);\r\n  const [clientParams, setClientParams] = useState(null);\r\n  const [isDarkModeOn, setIsDarkModeOn] = useState(\r\n    cookies.isDarkModeOn && cookies.isDarkModeOn === \"true\" ? true : false\r\n  );\r\n\r\n  const handlePlayerName = (props) => {\r\n    setPlayerName(props.target.value.slice(0, maxPlayerNameLen));\r\n  };\r\n\r\n  const handleRefreshName = () => {\r\n    setPlayerName(randPlayerName());\r\n  };\r\n  const handleDuration = (props) => setDuration(props.target.value);\r\n  const handleIncrement = (props) => setIncrement(props.target.value);\r\n  const handleJoinCode = (props) => setJoinCode(props.target.value);\r\n\r\n  const handleCreateGame = () => {\r\n    let [dur, inc] = [parseFloat(duration), parseFloat(increment)];\r\n    if (isNaN(dur) || dur < 0.1) {\r\n      dur = 5 / 60;\r\n      showToastNotification(\"Invalid duration, using 5s instead\", 5000);\r\n    } else if (dur > 120) {\r\n      dur = 120;\r\n      showToastNotification(\"Duration too long, using 2h instead\", 5000);\r\n    } else {\r\n      setCookie(\"duration\", dur, { path: \"/\" });\r\n    }\r\n    if (isNaN(inc) || inc < 0) {\r\n      inc = 0;\r\n      showToastNotification(\"Invalid increment, using 0s instead\", 5000);\r\n    } else if (inc > 300) {\r\n      inc = 300;\r\n      showToastNotification(\"Increment too large, using 5m instead\", 5000);\r\n    } else {\r\n      setCookie(\"increment\", inc, { path: \"/\" });\r\n    }\r\n    let name = playerName;\r\n    if (name === \"\") name = \"Anon\";\r\n    else setCookie(\"playerName\", name, { path: \"/\" });\r\n    setClientParams({\r\n      clientRole: \"Creator\",\r\n      timeControl: {\r\n        duration: dur,\r\n        increment: inc,\r\n      },\r\n      creatorName: name,\r\n    });\r\n    setIsOngoingGame(true);\r\n  };\r\n  const handleJoinGame = () => {\r\n    let name = playerName;\r\n    if (name === \"\") name = \"Anon\";\r\n    else setCookie(\"playerName\", name, { path: \"/\" });\r\n    setClientParams({\r\n      clientRole: \"Joiner\",\r\n      joinCode: joinCode,\r\n      joinerName: name,\r\n    });\r\n    setIsOngoingGame(true);\r\n  };\r\n  const handleViewGame = (watchGameId) => {\r\n    setClientParams({\r\n      clientRole: \"Spectator\",\r\n      gameId: watchGameId,\r\n    });\r\n    setIsOngoingGame(true);\r\n  };\r\n\r\n  const returnToLobby = () => {\r\n    setIsOngoingGame(false);\r\n    setClientParams(null);\r\n    setJoinCode(\"\");\r\n  };\r\n\r\n  const handleToggleDarkMode = () => {\r\n    setCookie(\"isDarkModeOn\", isDarkModeOn ? \"false\" : \"true\", { path: \"/\" });\r\n    setIsDarkModeOn(!isDarkModeOn);\r\n  };\r\n\r\n  //effect to set the background color of the entire site based on dark mode\r\n  useEffect(() => {\r\n    const backgroundColors = {\r\n      dark: \"#004d40\",\r\n      light: \"#009688\",\r\n    };\r\n    if (isDarkModeOn)\r\n      document.body.style.backgroundColor = backgroundColors.dark;\r\n    else document.body.style.backgroundColor = backgroundColors.light;\r\n  }, [isDarkModeOn]);\r\n\r\n  //preparing props for layout (duplicated with GamePage)\r\n  const isLargeScreen = useMediaQuery({ query: \"(min-width: 990px)\" });\r\n  const dims = globalSettings.boardDims;\r\n  let [gSize, wWidth] = isLargeScreen\r\n    ? [globalSettings.groundSize, globalSettings.wallWidth]\r\n    : [\r\n        globalSettings.smallScreenGroundSize,\r\n        globalSettings.smallScreenWallWidth,\r\n      ];\r\n  const boardHeight = (wWidth * (dims.h - 1)) / 2 + (gSize * (dims.h + 1)) / 2;\r\n  const boardWidth = (wWidth * (dims.w - 1)) / 2 + (gSize * (dims.w + 1)) / 2;\r\n  const gapSize = isLargeScreen ? 15 : 6;\r\n  let gridTemplateRows, gridTemplateColumns, gridTemplateAreas;\r\n  const titleHeight = 40;\r\n  const sideBySideLayout = useMediaQuery({ query: \"(min-width: 1300px)\" });\r\n  if (sideBySideLayout) {\r\n    gridTemplateRows = `${titleHeight}px ${boardHeight}px`;\r\n    gridTemplateColumns = `${boardWidth}px ${boardWidth}px`;\r\n    gridTemplateAreas =\r\n      \"'showcaseTitle recentTitle' 'gameShowcase recentGameList'\";\r\n  } else {\r\n    gridTemplateRows = `${titleHeight}px ${boardHeight}px ${titleHeight}px ${boardHeight}px`;\r\n    gridTemplateColumns = `${boardWidth}px`;\r\n    gridTemplateAreas =\r\n      \"'showcaseTitle' 'gameShowcase' 'recentTitle' 'recentGameList'\";\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingBottom: \"2rem\",\r\n      }}\r\n    >\r\n      <ToastContainer />\r\n\r\n      {isOngoingGame && (\r\n        <GamePage\r\n          socket={socket}\r\n          clientParams={clientParams}\r\n          returnToLobby={returnToLobby}\r\n          isLargeScreen={isLargeScreen}\r\n          isDarkModeOn={isDarkModeOn}\r\n          handleToggleDarkMode={handleToggleDarkMode}\r\n        />\r\n      )}\r\n      {!isOngoingGame && (\r\n        <div>\r\n          <Header\r\n            gameName={\"\"}\r\n            helpText={LobbyHelp()}\r\n            isLargeScreen={isLargeScreen}\r\n            isDarkModeOn={isDarkModeOn}\r\n            handleToggleDarkMode={handleToggleDarkMode}\r\n          />\r\n          <LobbyForm\r\n            playerName={playerName}\r\n            handlePlayerName={handlePlayerName}\r\n            duration={duration}\r\n            handleDuration={handleDuration}\r\n            increment={increment}\r\n            handleIncrement={handleIncrement}\r\n            joinCode={joinCode}\r\n            handleJoinCode={handleJoinCode}\r\n            handleCreateGame={handleCreateGame}\r\n            handleJoinGame={handleJoinGame}\r\n            handleRefreshName={handleRefreshName}\r\n          />\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateRows: gridTemplateRows,\r\n              gridTemplateColumns: gridTemplateColumns,\r\n              gridTemplateAreas: gridTemplateAreas,\r\n              columnGap: `${2 * gapSize}px`,\r\n              rowGap: `${gapSize}px`,\r\n              margin: `${gapSize}px`,\r\n              justifyContent: \"center\",\r\n              alignContent: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                gridArea: \"showcaseTitle\",\r\n                alignSelf: \"center\",\r\n                justifySelf: \"center\",\r\n                fontSize: \"20px\",\r\n              }}\r\n              title={\"Random games already played\"}\r\n            >\r\n              Game Showcase\r\n            </div>\r\n            <div style={{ gridArea: \"gameShowcase\" }}>\r\n              <GameShowcase\r\n                socket={socket}\r\n                isLargeScreen={isLargeScreen}\r\n                isDarkModeOn={isDarkModeOn}\r\n                handleViewGame={handleViewGame}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                gridArea: \"recentTitle\",\r\n                alignSelf: \"center\",\r\n                justifySelf: \"center\",\r\n                fontSize: \"20px\",\r\n              }}\r\n            >\r\n              Recent games\r\n            </div>\r\n            <div style={{ gridArea: \"recentGameList\" }}>\r\n              <RecentGameList\r\n                socket={socket}\r\n                isLargeScreen={isLargeScreen}\r\n                isDarkModeOn={isDarkModeOn}\r\n                handleViewGame={handleViewGame}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyPage;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport socketIoClient from \"socket.io-client\";\r\nimport { CookiesProvider } from \"react-cookie\";\r\n\r\nimport LobbyPage from \"./lobby/LobbyPage\";\r\n\r\nconst App = () => {\r\n  const BACKEND_ENDPOINT =\r\n    process.env.REACT_APP_BACKEND_URL || \"localhost:4001\";\r\n  console.log(`connecting to backend at ${BACKEND_ENDPOINT}`);\r\n  const [socket] = useState(socketIoClient(BACKEND_ENDPOINT));\r\n\r\n  //every route redirects back to '/wallwars/index.html',\r\n  //where the entire app exists as a single-page application\r\n  return (\r\n    <React.StrictMode>\r\n      <CookiesProvider>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/wallwars/index.html\" exact>\r\n              <LobbyPage socket={socket} />\r\n            </Route>\r\n            <Redirect to=\"/wallwars/index.html\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </CookiesProvider>\r\n    </React.StrictMode>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/moveSound.6df49e4b.mp3\";"],"sourceRoot":""}